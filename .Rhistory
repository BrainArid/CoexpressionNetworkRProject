<<<<<<< Updated upstream
cor(a)
cor(a,use="na.rm")
cor(a,use="complete")
cor(a,use="complete.obs")
cor(a,use="all.obs")
cor(a,use="every")
cor(a,use="na.or.complete")
cor(a,use="pairwise.complete.obs")
=======
}
return(arg);
}
>>>>>>> Stashed changes
args$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);
args$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);
args$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);
args$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);
args$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);
args$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);
args$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);
args$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);
args$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);
#import data
print("Importing data files.");
maDir <- "Data/BRCA/Batch 47/Expression-Genes/UNC__AgilentG4502A_07_3/Level_3/";
rsDir <- "Data/BRCA/Batch 47/RNASeqV2/UNC__IlluminaHiSeq_RNASeqV2/Level_3/";
#Metadata
metaData <- read.table(file="Data/BRCA/Batch 47/file_manifest.txt",header=TRUE,sep="\t");
metaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool
metaData[,6] <- gsub(pattern="-",replacement=".", x=metaData[,6]);#replace '-' with '.' to make mapping easier later
<<<<<<< Updated upstream
Data <- readRDS("normalization.RDS");
head(is.na(x=Data$ma))
sum(c(FALSE,TRUE,FALSE))
sum(c(FALSE,TRUE,FALSE,TRUE))
mapply(x=is.na(Data$ma), FUN=sum,1)
mapply(x=is.na(Data$ma), FUN=sum)
colSums(x=is.na(Data$ma),dims=2)
colSums(x=is.na(Data$ma),dims=1)
plot(colSums(x=is.na(Data$ma),dims=1))
hist(colSums(x=is.na(Data$ma),dims=0))
hist(rowSums(x=is.na(Data$ma),dims=1))
hist(rowSums(x=is.na(Data$ma),dims=1),plot=FALSE)$counts
hist(rowSums(x=is.na(Data$rs_raw),dims=1),plot=FALSE)$counts
hist(rowSums(x=is.na(Data$rs_RPKM),dims=1),plot=FALSE)$counts
hist(rowSums(x=is.na(Data$rs_Ubi),dims=1),plot=FALSE)$counts
hist(rowSums(x=is.na(Data$rs_DESeq),dims=1),plot=FALSE)$counts
hist(rowSums(x=is.na(Data$rs_quant),dims=1),plot=FALSE)$counts
hist(rowSums(x=is.na(Data$ma),dims=1),plot=FALSE)$counts
.lastans
hist(rowSums(x=is.na(Data$ma),dims=1),plot=FALSE)$counts
.lastAns
hist(rowSums(x=is.na(Data$ma),dims=1),plot=FALSE)$counts
.last_ans
hist(rowSums(x=is.na(Data$ma),dims=1),plot=FALSE)$counts
.last.value
.last.ans
.last.value
hist(rowSums(x=is.na(Data$ma),dims=1),plot=FALSE)$counts
sum(.Last.value)
maControlFiles <- paste0(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste0(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste0(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste0(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
source("CoexpressionNetworkRProject/constructCrossSampleFrame.R");
Data <- list();
Data$ma_con <- constructCrossSampleFrame(inFiles=maControlFiles,rows2Ignore=c(1));
Data$ma_can <- constructCrossSampleFrame(inFiles=maCancerFiles,rows2Ignore=c(1));
Data$rs_con <- constructCrossSampleFrame(inFiles=rsControlFiles,cols2Ignore=c(3,4));
Data$rs_can <- constructCrossSampleFrame(inFiles=rsCancerFiles,cols2Ignore=c(3,4));
maControlFiles <- paste0(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste0(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste0(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste0(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
dim(Data$ma)
head(Data$ma)
Data <- readRDS("normalization.RDS");
dim(Data$ma)
which(rowSums(x=is.na(Data$ma),dims=1))>0
rowSums(x=is.na(Data$ma),dims=1)>0
which(rowSums(x=is.na(Data$ma),dims=1)>0)
length(which(rowSums(x=is.na(Data$ma),dims=1)>0))
ind2Remove <- which(rowSums(x=is.na(Data$ma),dims=1)>0);
print(paste0("Removing ",length(ind2Remove)," genes with missing values from microArray data."));
Data$ma <- Data$ma[-which(rowSums(x=is.na(Data$ma),dims=1)>0),]
dim(Data$ma)
Data$ma["DNAH3"]
Data$ma["BRCA1"]
Data$ma["BRCA1",]
Data$ma["DNAH3",]
Data$ma["Im a horse,]
"]
Data$ma["Im a horse",]
setwd("C:/Users/Student/My Research/microArray v RNA Seq/")
args$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);
args$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);
args$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);
args$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);
args$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);
args$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);
args$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);
args$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);
args$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);
args<- as.list(args);
args$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);
args$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);
args$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);
args$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);
args$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);
args$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);
args$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);
args$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);
args$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);
initializeBooleanArg <- function(arg, default){
if(is.null(arg))
{
arg <- default;
} else if(is.character(arg))
{
arg <- as.logical(arg);
}
return(arg);
}
args$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);
args$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);
args$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);
args$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);
args$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);
args$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);
args$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);
args$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);
args$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);
source("http://bioconductor.org/biocLite.R");
print("Importing data files.");
maDir <- "Data/BRCA/Batch 47/Expression-Genes/UNC__AgilentG4502A_07_3/Level_3/";
rsDir <- "Data/BRCA/Batch 47/RNASeqV2/UNC__IlluminaHiSeq_RNASeqV2/Level_3/";
#Metadata
metaData <- read.table(file="Data/BRCA/Batch 47/file_manifest.txt",header=TRUE,sep="\t");
metaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool
metaData[,6] <- gsub(pattern="-",replacement=".", x=metaData[,6]);#replace '-' with '.' to make mapping easier later
print("Reading original TCGA data");
maControlFiles <- paste0(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste0(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste0(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste0(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
maControlFiles <- paste0(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste0(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste0(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste0(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
maControlFiles <- paste0(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste0(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste0(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste0(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
maControlFiles <- paste0(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste0(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste0(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste0(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]
metaData <- read.table(file="Data/BRCA/Batch 47/file_manifest.txt",header=TRUE,sep="\t");
metaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool
metaData[,6] <- gsub(pattern="-",replacement=".", x=metaData[,6]);#replace '-' with '.' to make mapping easier later
names(metaData)
maControlFiles <- paste0(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste0(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste0(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste0(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
source("CoexpressionNetworkRProject/constructCrossSampleFrame.R");
Data <- list();
Data$ma_con <- constructCrossSampleFrame(inFiles=maControlFiles,rows2Ignore=c(1));
Data$ma_can <- constructCrossSampleFrame(inFiles=maCancerFiles,rows2Ignore=c(1));
Data$rs_con <- constructCrossSampleFrame(inFiles=rsControlFiles,cols2Ignore=c(3,4));
Data$rs_can <- constructCrossSampleFrame(inFiles=rsCancerFiles,cols2Ignore=c(3,4));
if(is.null(Data$ma))
{
Data$ma <- cbind(Data$ma_con, Data$ma_can);
ind2Remove <- which(rowSums(x=is.na(Data$ma),dims=1)>0);
print(paste0("Removing ",length(ind2Remove)," genes with missing values from microArray data."));
Data$ma <- Data$ma[-which(rowSums(x=is.na(Data$ma),dims=1)>0),]
}
if(is.null(Data$rs_raw))
{
=======
print("Reading normalization.RDS");
Data <- readRDS("normalization.RDS");
Data <- readRDS("normalizationData.rds");
Data
readRDS("normalizationData.rds");
readRDS("normalizationData.rds");
readRDS("normalizationData.rds")
x <- data.frame(chunky=c(1,2,3,4), hunky=c(4,3,2,1))
x
saveRDS(object=x,file = "x.rds")
rm(x)
x <- readRDS(file = "x.rds")
x
args$dataFromRDS
args$saveNormalizationRDS
args$saveNormalizationRDS<-TRUE
if(args$dataFromRDS)
{
print("Reading normalization.RDS");
Data <- readRDS("normalizationData.rds");
} else
{
print("Reading original TCGA data");
maControlFiles <- paste(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
source("CoexpressionNetworkRProject/constructCrossSampleFrame.R");
Data <- list();
Data$ma_con <- constructCrossSampleFrame(inFiles=maControlFiles,rows2Ignore=c(1));
Data$ma_can <- constructCrossSampleFrame(inFiles=maCancerFiles,rows2Ignore=c(1));
Data$rs_con <- constructCrossSampleFrame(inFiles=rsControlFiles,cols2Ignore=c(3,4));
Data$rs_can <- constructCrossSampleFrame(inFiles=rsCancerFiles,cols2Ignore=c(3,4));
if(is.null(Data$ma))
{
Data$ma <- cbind(Data$ma_con, Data$ma_can);
}
if(is.null(Data$rs_raw))
{
Data$rs_raw <- cbind(Data$rs_con, Data$rs_can);
source("CoexpressionNetworkRProject/trim_TCGA_RNASeq_GeneNames.R");
Data$rs_raw <- trim_TCGA_RNASeq_GeneNames(Data$rs_raw);
}
Data$conCount <- dim(Data$ma_con)[2];
Data$canCount <- dim(Data$ma_can)[2];
Data$ma_con <- NULL;
Data$ma_can <- NULL;
Data$rs_con <- NULL;
Data$rs_can <- NULL;
rm(maControlFiles, maCancerFiles, rsControlFiles, rsCancerFiles);
#take intersection of genes between micro array and rnaseq set
print("Calculating intersection of genes.");
sharedGenes <- intersect(row.names(Data$ma), row.names(Data$rs_raw));
Data$ma <- Data$ma[sharedGenes,];
Data$rs_raw <- Data$rs_raw[sharedGenes,];
remove(sharedGenes);
Data$rs_raw <- matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw)));
}
#normalize
print("Begin normalization:")
#RMKM
if(args$normFlagRPKM && is.null(Data$rs_RPKM))
{
print("RPKM normalization:")
#source("http://bioconductor.org/biocLite.R")
biocLite("easyRNASeq")
library("easyRNASeq")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
biocLite("org.Hs.eg.db")
hg19GeneLengths <- function(symbols)
{
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )
sapply(egs,function(eg)
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
return (as.numeric(egs));
}
rpkm <- function(expMatrix)
{
#RPKM = (10^9 * C)/(N * L), with
#C = Number of reads mapped to a gene
#N = Total mapped reads in the experiment
#L = gene length in base-pairs for a gene
lengths <- hg19GeneLengths(row.names(expMatrix));
I<- intersect(names(lengths),row.names(expMatrix));
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
return(rpkmMat);
}
Data$rs_RPKM <- rpkm(Data$rs_raw);
}
#DESeq variance stableizing transformation (VST) normalization
if(args$normFlagDESeq && is.null(Data$rs_DESeq))
{
print("DESeq normalization:");
#source("http://bioconductor.org/biocLite.R");
biocLite("DESeq2");
library("DESeq2");
colData <- DataFrame(condition=c(rep(x="control",times=Data$conCount), rep(x="cancer", times=Data$canCount)), type=c(rep(x="single-read",times=Data$conCount+Data$canCount)));
#row.names(colData) <- colnames(countData);
dds <- DESeqDataSetFromMatrix(countData=matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw))), design = ~ condition,colData=colData);
dds <- DESeq(dds);
dds$condition <- factor(dds$condition, levels=c("cancer","control"));
res <- results(dds);
res$log2FoldChange<- -res$log2FoldChange;#reverse direction of test
if(args$diffExprsFlag)
{
#DESeq differential Expression
resOrdered <- res[order(res$padj),];
head(resOrdered);
n <- 150;
write.csv(resOrdered,file=paste("DiffExpression DesSEQ.csv"),quote=FALSE,);
rm(resOrdered);
}
Data$rs_DESeq <- t( t(counts(dds)) / sizeFactors(dds) );
}
#EdgeR does not do cross sample normalization
#source("http://bioconductor.org/biocLite.R")
#biocLite("edgeR")
#library("edgeR")
#total ubiquetous normalization as per "Optimal scaling of Digital Transcriptomes" By Glusman et al.
if(args$normFlagUbi && is.null(Data$rs_Ubi))
{
print("Total ubiquitous normalization:");
#setwd("CoexpressionNetworkProject/")
source("CoexpressionNetworkRProject/ubiquitousNormalize.R");
source("CoexpressionNetworkRProject/getUbiquitousGeneSet.R");
source("CoexpressionNetworkRProject/getTrimmedSet_UbiquitousHelper.R");
Data$rs_Ubi <- ubiquitousNormalize(Data$rs_raw,lowerPercentile=0.3,upperPercentile=0.85);
#setwd("..")
}
#quantile
if(args$normFlagQuant && is.null(Data$rs_quant))
{
print("Quantile normalization:");
source('http://bioconductor.org/biocLite.R');
biocLite('preprocessCore');
#load package
library(preprocessCore);
#quantile differential expression
#...
Data$rs_quant <- normalize.quantiles(x= Data$rs_raw, copy=TRUE);
}
if(args$saveNormalizationRDS)
{
saveRDS(data, file="normalization.RDS")
}
print("done")
x <- readRDS("normalization.RDS");
saveRDS(Data, file="normalization.RDS")
x <- readRDS("normalization.RDS");
saveRDS(Data, file="normalization.RDS")
Data$rs_RPKM
dim(Data$ma)
dim(x$ma)
sqrt(x = 9409)
hist(Data$ma)
png(filename="MicroArray normalization check.png");
boxplot(x=Data$ma,names=seq(1,dim(Data$ma)[2]), outcex=0.5, outpch=20, main="Patient box plots", xlab="Patient", ylab="expression value");
dev.off();
png(filename="RNASeq Count normalization check.png");
boxplot(x=log(Data$rs_raw),names=seq(1,Data$conCount+Data$canCount), outcex=0.5, outpch=20, main="Patient box plots", xlab="Patient", ylab="log RNA seq counts");
dev.off();
png(filename="RNASeq RPKM normalization check.png");
boxplot(x=log(Data$rs_RPKM),names=seq(1,Data$conCount+Data$canCount), outcex=0.5, outpch=20, main="Patient box plots", xlab="Patient", ylab="log RNA seq RPKM");
dev.off();
png(filename="RNASeq DESeq normalization check.png");
boxplot(x=log(Data$rs_DESeq),names=seq(1,Data$conCount+Data$canCount), outcex=0.5, outpch=20, main="Patient box plots", xlab="Patient", ylab="log RNA seq DESeq normalized");
dev.off();
png(filename="RNASeq quantile normalization check.png");
boxplot(x=log(Data$rs_quant),names=seq(1,Data$conCount+Data$canCount), outcex=0.5, outpch=20, main="Patient box plots", xlab="Patient", ylab="log RNA seq quan normalized");
dev.off();
png(filename="RNASeq total ubiquitous normalization check.png");
boxplot(x=log(Data$rs_Ubi),names=seq(1,Data$conCount+Data$canCount), outcex=0.5, outpch=20, main="Patient box plots", xlab="Patient", ylab="log RNA seq total ubiquitous normalized");
dev.off();
a <- cbind(c(2,3,4,5),c(1,1,1,1),c(4,6,1,7),c(3,8,7,9))
a
length(a)
dim(a)
b <- cbind(c(0,4,-4,-5),c(-1,1,-1,1),c(8,3,-1,7),c(-3,1,3,-9))
a-b
dim(a-b)
mode(a)
type(a)
class(a)
print(paste("Current working directory: ", getwd()));
source("http://bioconductor.org/biocLite.R");
#read in arguments
print("Reading in command line arguments.");
args <- commandArgs(trailingOnly = TRUE);
print(paste("commandArgs: ",args));
if(length(args) > 0)
{
#Parse arguments (we expec the form --argName=argValue)
parseArgs <- function (x) strsplit(sub("^--","",x), "=");
argsDF <- as.data.frame(do.call("rbind", parseArgs(args)));
args <- as.character(argsDF$V2)
names(args) <- argsDF$V1
rm(argsDF);
}
args<- as.list(args);
#initialize arguments if
initializeBooleanArg <- function(arg, default){
if(is.null(arg))
{
arg <- default;
} else if(is.character(arg))
{
arg <- as.logical(arg);
}
return(arg);
}
args$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);
args$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);
args$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);
args$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);
args$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);
args$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);
args$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);
args$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);
args$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);
#import data
print("Importing data files.");
maDir <- "Data/BRCA/Batch 47/Expression-Genes/UNC__AgilentG4502A_07_3/Level_3/";
rsDir <- "Data/BRCA/Batch 47/RNASeqV2/UNC__IlluminaHiSeq_RNASeqV2/Level_3/";
#Metadata
metaData <- read.table(file="Data/BRCA/Batch 47/file_manifest.txt",header=TRUE,sep="\t");
metaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool
metaData[,6] <- gsub(pattern="-",replacement=".", x=metaData[,6]);#replace '-' with '.' to make mapping easier later
if(args$dataFromRDS)
{
print("Reading normalization.RDS");
Data <- readRDS("normalization.RDS");
} else
{
print("Reading original TCGA data");
maControlFiles <- paste(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
source("CoexpressionNetworkRProject/constructCrossSampleFrame.R");
Data <- list();
Data$ma_con <- constructCrossSampleFrame(inFiles=maControlFiles,rows2Ignore=c(1));
Data$ma_can <- constructCrossSampleFrame(inFiles=maCancerFiles,rows2Ignore=c(1));
Data$rs_con <- constructCrossSampleFrame(inFiles=rsControlFiles,cols2Ignore=c(3,4));
Data$rs_can <- constructCrossSampleFrame(inFiles=rsCancerFiles,cols2Ignore=c(3,4));
if(is.null(Data$ma))
{
Data$ma <- cbind(Data$ma_con, Data$ma_can);
}
if(is.null(Data$rs_raw))
{
>>>>>>> Stashed changes
Data$rs_raw <- cbind(Data$rs_con, Data$rs_can);
source("CoexpressionNetworkRProject/trim_TCGA_RNASeq_GeneNames.R");
Data$rs_raw <- trim_TCGA_RNASeq_GeneNames(Data$rs_raw);
}
Data$conCount <- dim(Data$ma_con)[2];
Data$canCount <- dim(Data$ma_can)[2];
Data$ma_con <- NULL;
Data$ma_can <- NULL;
Data$rs_con <- NULL;
Data$rs_can <- NULL;
rm(maControlFiles, maCancerFiles, rsControlFiles, rsCancerFiles);
#take intersection of genes between micro array and rnaseq set
print("Calculating intersection of genes.");
sharedGenes <- intersect(row.names(Data$ma), row.names(Data$rs_raw));
Data$ma <- Data$ma[sharedGenes,];
Data$rs_raw <- Data$rs_raw[sharedGenes,];
remove(sharedGenes);
Data$rs_raw <- matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw)));
<<<<<<< Updated upstream
=======
}
#normalize
>>>>>>> Stashed changes
print("Begin normalization:")
#RMKM
if(args$normFlagRPKM && is.null(Data$rs_RPKM))
{
print("RPKM normalization:")
#source("http://bioconductor.org/biocLite.R")
biocLite("easyRNASeq")
library("easyRNASeq")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
biocLite("org.Hs.eg.db")
hg19GeneLengths <- function(symbols)
{
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )
egs <- sapply(egs,function(eg)
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
<<<<<<< Updated upstream
return (egs);
=======
return (as.numeric(egs));
>>>>>>> Stashed changes
}
rpkm <- function(expMatrix)
{
#RPKM = (10^9 * C)/(N * L), with
#C = Number of reads mapped to a gene
#N = Total mapped reads in the experiment
#L = gene length in base-pairs for a gene
<<<<<<< Updated upstream
symbols <- row.names(expMatrix);
lengths <- hg19GeneLengths(symbols);
I<- intersect(names(lengths),symbols);
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(X){return(X/sum(X))})
=======
lengths <- hg19GeneLengths(row.names(expMatrix));
I<- intersect(names(lengths),row.names(expMatrix));
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})
>>>>>>> Stashed changes
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
return(rpkmMat);
}
Data$rs_RPKM <- rpkm(Data$rs_raw);
}
<<<<<<< Updated upstream
setwd("/home/barand/microArray_v_RNASeq/")
print("Reading in command line arguments.");
args <- commandArgs(trailingOnly = TRUE);
print(paste0("commandArgs: ",args));
if(length(args) > 0)
{
#Parse arguments (we expec the form --argName=argValue)
parseArgs <- function (x) strsplit(sub("^--","",x), "=");
argsDF <- as.data.frame(do.call("rbind", parseArgs(args)));
args <- as.character(argsDF$V2)
names(args) <- argsDF$V1
rm(argsDF);
}
args<- as.list(args);
#initialize arguments if
initializeBooleanArg <- function(arg, default){
if(is.null(arg))
{
arg <- default;
} else if(is.character(arg))
{
arg <- as.logical(arg);
}
return(arg);
}
args$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);
args$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);
args$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);
args$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);
args$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);
args$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);
args$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);
args$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);
args$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);
#import data
print("Importing data files.");
maDir <- "Data/BRCA/Batch 47/Expression-Genes/UNC__AgilentG4502A_07_3/Level_3/";
rsDir <- "Data/BRCA/Batch 47/RNASeqV2/UNC__IlluminaHiSeq_RNASeqV2/Level_3/";
#Metadata
metaData <- read.table(file="Data/BRCA/Batch 47/file_manifest.txt",header=TRUE,sep="\t");
metaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool
metaData[,6] <- gsub(pattern="-",replacement=".", x=metaData[,6]);#replace '-' with '.' to make mapping easier later
print("Reading in command line arguments.");
args <- commandArgs(trailingOnly = TRUE);
print(paste0("commandArgs: ",args));
if(length(args) > 0)
{
#Parse arguments (we expec the form --argName=argValue)
parseArgs <- function (x) strsplit(sub("^--","",x), "=");
argsDF <- as.data.frame(do.call("rbind", parseArgs(args)));
args <- as.character(argsDF$V2)
names(args) <- argsDF$V1
rm(argsDF);
}
args<- as.list(args);
#initialize arguments if
initializeBooleanArg <- function(arg, default){
if(is.null(arg))
{
arg <- default;
} else if(is.character(arg))
{
arg <- as.logical(arg);
}
return(arg);
}
args$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);
args$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);
args$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);
args$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);
args$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);
args$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);
args$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);
args$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);
args$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);
#import data
print("Importing data files.");
maDir <- "Data/BRCA/Batch 47/Expression-Genes/UNC__AgilentG4502A_07_3/Level_3/";
rsDir <- "Data/BRCA/Batch 47/RNASeqV2/UNC__IlluminaHiSeq_RNASeqV2/Level_3/";
#Metadata
metaData <- read.table(file="Data/BRCA/Batch 47/file_manifest.txt",header=TRUE,sep="\t");
metaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool
metaData[,6] <- gsub(pattern="-",replacement=".", x=metaData[,6]);#replace '-' with '.' to make mapping easier later
setwd("/home/barand/microArray_v_RNASeq/")
setwd("C:/Users/Student/My Research/microArray v RNA Seq/");
print("Reading in command line arguments.");
args <- commandArgs(trailingOnly = TRUE);
print(paste0("commandArgs: ",args));
if(length(args) > 0)
{
#Parse arguments (we expec the form --argName=argValue)
parseArgs <- function (x) strsplit(sub("^--","",x), "=");
argsDF <- as.data.frame(do.call("rbind", parseArgs(args)));
args <- as.character(argsDF$V2)
names(args) <- argsDF$V1
rm(argsDF);
}
args<- as.list(args);
#initialize arguments if
initializeBooleanArg <- function(arg, default){
if(is.null(arg))
{
arg <- default;
} else if(is.character(arg))
{
arg <- as.logical(arg);
}
return(arg);
}
args$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);
args$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);
args$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);
args$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);
args$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);
args$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);
args$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);
args$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);
args$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);
#import data
print("Importing data files.");
maDir <- "Data/BRCA/Batch 47/Expression-Genes/UNC__AgilentG4502A_07_3/Level_3/";
rsDir <- "Data/BRCA/Batch 47/RNASeqV2/UNC__IlluminaHiSeq_RNASeqV2/Level_3/";
#Metadata
metaData <- read.table(file="Data/BRCA/Batch 47/file_manifest.txt",header=TRUE,sep="\t");
metaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool
metaData[,6] <- gsub(pattern="-",replacement=".", x=metaData[,6]);#replace '-' with '.' to make mapping easier later
print("Reading original TCGA data");
maControlFiles <- paste0(sep='', maDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
maCancerFiles <- paste0(sep='', maDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="Expression-Genes" ,"File.Name"]));
rsControlFiles <- paste0(sep='', rsDir ,as.character(metaData[metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
rsCancerFiles <- paste0(sep='', rsDir ,as.character(metaData[!metaData[,"control"] & metaData[,"Platform.Type"]=="RNASeqV2" & grepl(x=metaData[,"File.Name"], pattern="*.rsem.genes.results") ,"File.Name"]));
source("CoexpressionNetworkRProject/constructCrossSampleFrame.R");
Data <- list();
Data$ma_con <- constructCrossSampleFrame(inFiles=maControlFiles,rows2Ignore=c(1));
Data$ma_can <- constructCrossSampleFrame(inFiles=maCancerFiles,rows2Ignore=c(1));
Data$rs_con <- constructCrossSampleFrame(inFiles=rsControlFiles,cols2Ignore=c(3,4));
Data$rs_can <- constructCrossSampleFrame(inFiles=rsCancerFiles,cols2Ignore=c(3,4));
if(is.null(Data$ma))
{
Data$ma <- cbind(Data$ma_con, Data$ma_can);
ind2Remove <- which(rowSums(x=is.na(Data$ma),dims=1)>0);
print(paste0("Removing ",length(ind2Remove)," genes with missing values from microArray data."));
Data$ma <- Data$ma[-which(rowSums(x=is.na(Data$ma),dims=1)>0),]
}
if(is.null(Data$rs_raw))
{
Data$rs_raw <- cbind(Data$rs_con, Data$rs_can);
source("CoexpressionNetworkRProject/trim_TCGA_RNASeq_GeneNames.R");
Data$rs_raw <- trim_TCGA_RNASeq_GeneNames(Data$rs_raw);
}
Data$conCount <- dim(Data$ma_con)[2];
Data$canCount <- dim(Data$ma_can)[2];
Data$ma_con <- NULL;
Data$ma_can <- NULL;
Data$rs_con <- NULL;
Data$rs_can <- NULL;
rm(maControlFiles, maCancerFiles, rsControlFiles, rsCancerFiles);
#take intersection of genes between micro array and rnaseq set
print("Calculating intersection of genes.");
sharedGenes <- intersect(row.names(Data$ma), row.names(Data$rs_raw));
Data$ma <- Data$ma[sharedGenes,];
Data$rs_raw <- Data$rs_raw[sharedGenes,];
remove(sharedGenes);
Data$rs_raw <- matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw)));
print("Begin normalization:")
biocLite("easyRNASeq")
source("http://bioconductor.org/biocLite.R");
print("RPKM normalization:")
biocLite("easyRNASeq")
library("easyRNASeq")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
biocLite("org.Hs.eg.db")
hg19GeneLengths <- function(symbols)
{
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )
egs <- sapply(egs,function(eg)
=======
Data$rs_RPKM
args$normFlagRPKM && is.null(Data$rs_RPKM)
expMatrix <- Data$rs_raw
head(row.names(expMatrix))
symbols <- row.names(expMatrix)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )
head(egs)
sapply(egs,function(eg)
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
head(egs)
egsFull <- egs
egs <- egs[1:5]
egs
sapply(egs,function(eg)
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
egs <- egsFull
sapply(egs,function(eg)
>>>>>>> Stashed changes
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
<<<<<<< Updated upstream
return (egs);
}
rpkm <- function(expMatrix)
{
#RPKM = (10^9 * C)/(N * L), with
#C = Number of reads mapped to a gene
#N = Total mapped reads in the experiment
#L = gene length in base-pairs for a gene
symbols <- row.names(expMatrix);
lengths <- hg19GeneLengths(symbols);
I<- intersect(names(lengths),symbols);
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(X){return(X/sum(X))})
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
return(rpkmMat);
}
Data$rs_RPKM <- rpkm(Data$rs_raw);
=======
head(egs)
egsCalc <- .Last.value
head(egsCalc)
egs <- sapply(egs,function(eg)
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
head(egs)
lengths <- as.numeric(egs)
I<- intersect(names(lengths),row.names(expMatrix));
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
Data$rs_RPKM <- rpkmMat
head(Data$rs_RPKM)
head(lengths)
head(egs)
head(as.numeric(egs))
I
lengths<-egs
I<- intersect(names(lengths),row.names(expMatrix));
head(I)
head(names(lengths))
head(row.names(expMatrix))
head(expMatrix)
expMatrix[1:2,1:2]
head(row.names(expMatrix))
head(col.names(expMatrix))
head(colnames(expMatrix))
Data$rs_raw[1:2,1:2]
row.names(Data$rs_raw[1:2,1:2])
row.names(expMatrix)
I<- intersect(names(lengths),symbols);
head(I)
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
head(rpkmMat)
head(lengths)
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})
head(rpkmMat)
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(X){return(X/sum(X))})
head(rpkmMat)
head(expMatrix)
head(egs)
expMatrix<-Data$rs_raw
symbols <- row.names(expMatrix);
head(symbols)
head(expMatrix)
lengths<-egs
I<- intersect(names(lengths),symbols);
head(I)
head(expMatrix[I,])
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(X){return(X/sum(X))})
head(rpkmMat)
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
head(rpkmMat)
Data$rs_RPKM<-rpkmMat
#DESeq variance stableizing transformation (VST) normalization
>>>>>>> Stashed changes
if(args$normFlagDESeq && is.null(Data$rs_DESeq))
{
print("DESeq normalization:");
#source("http://bioconductor.org/biocLite.R");
biocLite("DESeq2");
library("DESeq2");
colData <- DataFrame(condition=c(rep(x="control",times=Data$conCount), rep(x="cancer", times=Data$canCount)), type=c(rep(x="single-read",times=Data$conCount+Data$canCount)));
#row.names(colData) <- colnames(countData);
dds <- DESeqDataSetFromMatrix(countData=matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw))), design = ~ condition,colData=colData);
dds <- DESeq(dds);
dds$condition <- factor(dds$condition, levels=c("cancer","control"));
res <- results(dds);
res$log2FoldChange<- -res$log2FoldChange;#reverse direction of test
if(args$diffExprsFlag)
{
#DESeq differential Expression
resOrdered <- res[order(res$padj),];
head(resOrdered);
n <- 150;
<<<<<<< Updated upstream
write.csv(resOrdered,file=paste0("DiffExpression DesSEQ.csv"),quote=FALSE,);
=======
write.csv(resOrdered,file=paste("DiffExpression DesSEQ.csv"),quote=FALSE,);
>>>>>>> Stashed changes
rm(resOrdered);
}
Data$rs_DESeq <- t( t(counts(dds)) / sizeFactors(dds) );
}
#EdgeR does not do cross sample normalization
#source("http://bioconductor.org/biocLite.R")
#biocLite("edgeR")
#library("edgeR")
#total ubiquetous normalization as per "Optimal scaling of Digital Transcriptomes" By Glusman et al.
if(args$normFlagUbi && is.null(Data$rs_Ubi))
{
print("Total ubiquitous normalization:");
#setwd("CoexpressionNetworkProject/")
source("CoexpressionNetworkRProject/ubiquitousNormalize.R");
source("CoexpressionNetworkRProject/getUbiquitousGeneSet.R");
source("CoexpressionNetworkRProject/getTrimmedSet_UbiquitousHelper.R");
Data$rs_Ubi <- ubiquitousNormalize(Data$rs_raw,lowerPercentile=0.3,upperPercentile=0.85);
#setwd("..")
}
#quantile
if(args$normFlagQuant && is.null(Data$rs_quant))
{
print("Quantile normalization:");
source('http://bioconductor.org/biocLite.R');
biocLite('preprocessCore');
#load package
library(preprocessCore);
#quantile differential expression
#...
Data$rs_quant <- normalize.quantiles(x= Data$rs_raw, copy=TRUE);
}
<<<<<<< Updated upstream
if(args$saveNormalizationRDS)
{
saveRDS(Data, file="normalization.RDS")
}
library("DESeq2");
library("DESeq2", lib.loc="C:/Users/Student/Documents/R/win-library/3.1")
colData <- DataFrame(condition=c(rep(x="control",times=Data$conCount), rep(x="cancer", times=Data$canCount)), type=c(rep(x="single-read",times=Data$conCount+Data$canCount)));
dds <- DESeqDataSetFromMatrix(countData=matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw))), design = ~ condition,colData=colData);
.libPaths()
.libPaths
.libPaths()
library("DESeq", lib.loc="C:/Users/Student/Documents/R/win-library/3.1")
detach("package:DESeq", unload=TRUE)
detach("package:DESeq2", unload=TRUE)
library("DESeq2", lib.loc="C:/Users/Student/Documents/R/win-library/3.1")
detach("package:DESeq2", unload=TRUE)
library("DESeq2",lib.loc=.libPaths()[1])
.libPaths()[1]
biocLite("DESeq2");
=======
head(x = Data$ma)
head(x = Data$rs_raw)
head(x = Data$rs_RPKM)
head(x = Data$rs_DESeq)
head(x = Data$rs_Ubi)
head(x = Data$rs_quant)
saveRDS(Data, file="normalization.RDS")
View(expMatrix)
>>>>>>> Stashed changes

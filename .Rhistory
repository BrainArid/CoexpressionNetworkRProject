cia_rpkm_DESeq  <- cia(Data$rs_RPKM, Data$rs_DESeq, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
mem_used()
function(d1,d1, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
function(d1,d2, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
ciaAndPlot <- function(d1,d2, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png");
ciaAndPlot(Data$ma, Data$rs_DESeq, "cia_ma_DESeq.png");
library("made4")
ciaAndPlot <- function(d1,d2, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
ciaAndPlot(Data$rs_RPKM, Data$rs_DESeq, "cia_RPKM_DESeq.png");
? plot.cia
library("made4")
d1 <- Data$ma
library("made4")
ciaAndPlot <- function(d1,d2, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
d1 <- Data$ma
d2 <- Data$rs_DESeq
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
plot.cia(ciaObj, nlab = 0, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
plot.cia(ciaObj, nlab = 0, genecol = "red",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
plot.cia(ciaObj, nlab = 0, genecol = c("red","blue"),genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
plot.cia(ciaObj, nlab = 0, genecol = c("red","blue"),genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col="green")
rep(x="h",time=4)
plot.cia(ciaObj, nlab = 0, genecol = c("red","blue"),genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=rep("green",times=97)
)
sampleColors<- c(rep("blue",6), rep("orange",91))
sampleColors
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png",sampleColors,genecolors);
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE, sampleCounts=c(-1));
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
rm(ciaObj);
}
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
rm(ciaObj);
}
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png",sampleColors,genecolors);
head(ciaObj$call$df1)
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
d1 <- Data$ma
d2 <- Data$rs_DESeq
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
head(names(d1))
names(d1)<-NULL;
names(d2)<-NULL;
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
head(d1)
mode(d1)
head(as.matrix(d1))
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, labs=NULL)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, labs=NULL)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
d1<- Data$ma
d2<- Data$rs_DESeq
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, labs=NULL)
plot.cia
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, label=NULL)
s.match.col
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=NULL)
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
filename<-"cia_ma_ma.png"
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
dev.off();
ciaAndPlot(Data$ma, Data$rs_DESeq, "cia_ma_DESeq.png");
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_RPKM, Data$rs_DESeq, "cia_RPKM_DESeq.png");
ciaAndPlot(Data$rs_RPKM, Data$rs_DESeq, "cia_RPKM_DESeq.png",sampleColors, geneColors);
Data <- readRDS("../normalization.RDS");
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
rm(ciaObj);
}
ciaAndPlot(Data$rs_DESeq, Data$rs_Ubi, "cia_DESeq_Ubi.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_DESeq, Data$rs_quant, "cia_DESeq_quant.png",sampleColors, geneColors);
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$rs_DESeq, Data$rs_Ubi, "cia_DESeq_Ubi.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_DESeq, Data$rs_quant, "cia_DESeq_quant.png",sampleColors, geneColors);
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$rs_DESeq, Data$rs_quant, "cia_DESeq_quant.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_DESeq, Data$rs_raw, "cia_DESeq_raw.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_DESeq, Data$rs_Ubi, "cia_DESeq_Ubi.png",sampleColors, geneColors);
library("made4")
ciaAndPlot <- function(d1,d2, filename, title, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, main=title)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, main=title)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91));
geneColors<- "red";#c(rep("blue",6), rep("orange",91));
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png", "Microarray Vs Microarray", sampleColors, geneColors);
ciaAndPlot <- function(d1,d2, filename, title, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, title=title)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, title=title)
rm(ciaObj);
}
ciaAndPlot(Data$rs_RPKM, Data$rs_DESeq, "cia_RPKM_DESeq.png", "RPKM Vs DESeq",sampleColors, geneColors);
library("made4")
ciaAndPlot <- function(d1,d2, filename, title, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, title=title)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, title=title)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91));
geneColors<- "red";#c(rep("blue",6), rep("orange",91));
ciaAndPlot(Data$ma, Data$rs_DESeq, "cia_ma_DESeq.png", "Microarray Vs DESeq", sampleColors, geneColors);
args$clustsFile1 <- initializeStringArg(arg=args$clustsFile1, default="ma_pearson_allGenes_int.txtg=0.90.modules");
args <- commandArgs(trailingOnly = TRUE);
print(paste0("commandArgs: ",args));
if(length(args) > 0)
{
#Parse arguments (we expec the form --argName=argValue)
parseArgs <- function (x)
{
s<- unlist(strsplit(sub("^--","",x), "="));
return(list(V1=s[1],V2=paste(s[-1],collapse = "=")))
}
argsDF <- as.data.frame(do.call("rbind", lapply(X = args,FUN = parseArgs)));
args <- as.list(argsDF$V2)
names(args) <- argsDF$V1
rm(argsDF)
}
print(paste0("commandArgs: ",args));
#initialize arguments if
initializeBooleanArg <- function(arg, default){
if(is.null(arg))
{
arg <- default;
} else if(is.character(arg))
{
arg <- as.logical(arg);
}
return(arg);
}
initializeStringArg <- function(arg, default){
if(is.null(arg))
{
arg <- default;
} else if(!is.character(arg))
{
arg <- as.character(arg);
}
return(arg);
}
initializeIntArg <- function(arg, default){
if(is.null(arg))
{
arg <- default;
} else if(!is.integer(arg))
{
arg <- as.integer(arg);
}
return(arg);
}
args$dir <- initializeStringArg(arg=args$dir, default="./");
args$clustsFile1 <- initializeStringArg(arg=args$clustsFile1, default="ma_pearson_allGenes_int.txtg=0.90.modules");
args$clustsFile2 <- initializeStringArg(arg=args$clustsFile2, default="rs_DESeq_spearman_allGenes_int.txtg=0.60.modules");
args$outDir <- initializeStringArg(arg=args$outDir, default="out/");
args$threshold <- initializeIntArg(arg=args$threshold, default=0.70);
args$clustHeatMap <- initializeBooleanArg(arg=args$clustHeatMat, default=FALSE);
args
args <- commandArgs(trailingOnly = TRUE);
args
if(length(args) > 0)
{
#Parse arguments (we expec the form --argName=argValue)
parseArgs <- function (x)
{
s<- unlist(strsplit(sub("^--","",x), "="));
return(list(V1=s[1],V2=paste(s[-1],collapse = "=")))
}
argsDF <- as.data.frame(do.call("rbind", lapply(X = args,FUN = parseArgs)));
args <- as.list(argsDF$V2)
names(args) <- argsDF$V1
rm(argsDF)
} else
{
args <- list();
}
print(paste0("commandArgs: ",args));
args
args$dir <- initializeStringArg(arg=args$dir, default="./");
args$clustsFile1 <- initializeStringArg(arg=args$clustsFile1, default="ma_pearson_allGenes_int.txtg=0.90.modules");
args$clustsFile2 <- initializeStringArg(arg=args$clustsFile2, default="rs_DESeq_spearman_allGenes_int.txtg=0.60.modules");
args$outDir <- initializeStringArg(arg=args$outDir, default="out/");
args$threshold <- initializeIntArg(arg=args$threshold, default=0.70);
args$clustHeatMap <- initializeBooleanArg(arg=args$clustHeatMat, default=FALSE);
args
dir <- args$dir
clustsFile1 <- args$clustsFile1
clustsFile2 <- args$clustsFile2
outDir <- args$outDir
threshold <- args$threshold
clustHeatMap <- args$clustHeatMap
setwd(dir);#setwd("/Users/Brian/Documents/Research/microArray v RNA Seq/BRCA/")
clusts1 <- read.table(file=paste0(dir,clustsFile1),sep = ",",stringsAsFactors = FALSE,fill = TRUE)
ls()
dir()
clustsFile1 <- "../Data/BRCA/maPearson_top12000_int_g0.85.clusters.txt"
clustsFile1 <- "../Data/BRCA/rsPearson_top12000_int_g0.7.clusters.txt"
clustsFile1 <- "../Data/BRCA/maPearson_top12000_int_g0.85.clusters.txt"
clustsFile1 <- "../Data/BRCA/maPearson_top12000_int_g0.85.clusters.csv"
clustsFile2 <- "../Data/BRCA/rsPearson_top12000_int_g0.7.clusters.csv"
countsMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
clusts1 <- read.table(file=paste0(dir,clustsFile1),sep = ",",stringsAsFactors = FALSE,fill = TRUE)
clusts2 <- read.table(file=paste0(dir,clustsFile2),sep = ",",stringsAsFactors = FALSE,fill = TRUE)
View(clusts1)
countsMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
countsMat[,]<-0;
rMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
rMat[,]<-0;
gMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
gMat[,]<-0;
bMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
bMat[,]<-0;
lengths1<-vector(length = dim(clusts1)[1])
for(i in 1:dim(clusts1)[1])
{
lengths1[i]<-length(clusts1[i,][clusts1[i,]!=""])
}
lengths2<-vector(length = dim(clusts2)[1])
for(i in 1:dim(clusts2)[1])
{
lengths2[i]<-length(clusts2[i,][clusts2[i,]!=""])
}
for(i in 1:dim(clusts1)[1])
{
for(j in 1:dim(clusts2)[1])
{
print(paste0("Cross comparing microarray row ", i, " of ", dim(clusts1)[1]," and column ", j, " of ", dim(clusts2)[1]));
countsMat[i,j] <- length(intersect(clusts1[i,][clusts1[i,]!=""],clusts2[j,][clusts2[j,]!=""]))
r<- lengths1[i];
g<- countsMat[i,j];
b<- lengths2[j];
x<- r + b - g;
rMat[i,j] <- r/x;
gMat[i,j] <- g/x;
bMat[i,j] <- b/x;
}
}
clusts1 <- clusts1[1:10,]
clusts2 <- clusts2[1:5, ]
countsMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
countsMat[,]<-0;
rMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
rMat[,]<-0;
gMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
gMat[,]<-0;
bMat <- matrix(nrow = dim(clusts1)[1], ncol= dim(clusts2)[1]);
bMat[,]<-0;
lengths1<-vector(length = dim(clusts1)[1])
for(i in 1:dim(clusts1)[1])
{
lengths1[i]<-length(clusts1[i,][clusts1[i,]!=""])
}
lengths2<-vector(length = dim(clusts2)[1])
for(i in 1:dim(clusts2)[1])
{
lengths2[i]<-length(clusts2[i,][clusts2[i,]!=""])
}
for(i in 1:dim(clusts1)[1])
{
for(j in 1:dim(clusts2)[1])
{
print(paste0("Cross comparing microarray row ", i, " of ", dim(clusts1)[1]," and column ", j, " of ", dim(clusts2)[1]));
countsMat[i,j] <- length(intersect(clusts1[i,][clusts1[i,]!=""],clusts2[j,][clusts2[j,]!=""]))
r<- lengths1[i];
g<- countsMat[i,j];
b<- lengths2[j];
x<- r + b - g;
rMat[i,j] <- r/x;
gMat[i,j] <- g/x;
bMat[i,j] <- b/x;
}
}
library("ggplot2")
library("reshape")
library("plyr")
library("scales")
countsMat.m <- melt(countsMat)
countsMat.m <- countsMat.m[with(countsMat.m, order(X1, X2)), ]
countRange <- range(countsMat);
install.packages("reshape")
library("reshape")
countsMat.m <- melt(countsMat)
countsMat.m <- countsMat.m[with(countsMat.m, order(X1, X2)), ]
countRange <- range(countsMat);
rMat.m <- melt(rMat)
rMat.m <- rMat.m[with(rMat.m, order(X1, X2)), ]
gMat.m <- melt(gMat)
gMat.m <- gMat.m[with(gMat.m, order(X1, X2)), ]
if(clustHeatMap)
{
p <- ggplot(gMat.m, aes(y=X1, x=X2)) + geom_tile(aes(y=X1,x=X2,fill = rgb(red = 0,green=value,blue=0)), colour = "black")+scale_fill_identity();
ggsave(filename = paste0(outDir, clustsFile1, "_VS_", clustsFile2, "_INTERSECT.png"),plot = p)
}
p <- ggplot(gMat.m, aes(y=X1, x=X2)) + geom_tile(aes(y=X1,x=X2,fill = rgb(red = 0,green=value,blue=0)), colour = "black")+scale_fill_identity();
ggsave(filename = paste0(outDir, clustsFile1, "_VS_", clustsFile2, "_INTERSECT.png"),plot = p)
p
bMat.m <- melt(bMat)
bMat.m <- bMat.m[with(bMat.m, order(X1, X2)), ]
colMat.m <- data.frame(X1=rMat.m$X1,X2=rMat.m$X2,r=rMat.m$value,g=gMat.m$value,b=bMat.m$value)
p <- ggplot(colMat.m, aes(y=X1, x=X2)) + geom_tile(aes(y=X1,x=X2,fill = rgb(red = r,green=g,blue=b)), colour = "black")+scale_fill_identity();
p
threshold
colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]
colMat.m
theshold <- 0.3
dim(colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,])[1]
colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]
colMat.m$r>threshold
colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold
threshold <- .2
colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold
colMat.m[1]
colMat.m[1,]
colMat.m
colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]
threshold<-.3
colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]
dim(colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,])
dim(colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,])[1]>0
x <- colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]$X1
y <- colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]$X2
x
y
threshold
commonModules <- list();
commonModules$profiles <- list();
commonModules$clusts1 <- list();
commonModules$clusts2 <- list();
for(i in 1:length(x))
{
commonModules$profiles[i] <- list(colMat.m[colMat.m$X1==x[i] & colMat.m$X2==y[i],c("X1","X2","r","g","b")]);
commonModules$clusts1[i] <- list(clusts1[x[i],clusts1[x[i],]!=""])
commonModules$clusts2[i] <- list(clusts2[y[i],clusts2[y[i],]!=""])
}
i <-1
1:length(x)
length(x)
commonModules$profiles[i] <- list(colMat.m[colMat.m$X1==x[i] & colMat.m$X2==y[i],c("X1","X2","r","g","b")]);
commonModules$clusts1[i] <- list(clusts1[x[i],clusts1[x[i],]!=""])
clusts1[x[i],]!=""
head(clusts1)
head(clusts2)
head(clusts1)
clusts1 <- read.table(file=paste0(dir,clustsFile1),sep = ",",stringsAsFactors = FALSE,fill = TRUE)
clusts2 <- read.table(file=paste0(dir,clustsFile2),sep = ",",stringsAsFactors = FALSE,fill = TRUE)
head(clusts1)
is.na(clusts1)
sumcols(is.na(clusts1))
colsum(is.na(clusts1))
col.sum(is.na(clusts1))
col.Sum(is.na(clusts1))
colSum(is.na(clusts1))
? sumcols
colSums(is.na(clusts1))
colSums(is.na(clusts1))>0
clusts1 <- clusts1[,colSums(is.na(clusts1))==0]
colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]
x <- colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]$X1
y <- colMat.m[colMat.m$r>threshold & colMat.m$g>threshold & colMat.m$b>threshold,]$X2
commonModules <- list();
commonModules$profiles <- list();
commonModules$clusts1 <- list();
commonModules$clusts2 <- list();
for(i in 1:length(x))
{
commonModules$profiles[i] <- list(colMat.m[colMat.m$X1==x[i] & colMat.m$X2==y[i],c("X1","X2","r","g","b")]);
commonModules$clusts1[i] <- list(clusts1[x[i],clusts1[x[i],]!=""])
commonModules$clusts2[i] <- list(clusts2[y[i],clusts2[y[i],]!=""])
}
i <- 1
commonModules$profiles[i] <- list(colMat.m[colMat.m$X1==x[i] & colMat.m$X2==y[i],c("X1","X2","r","g","b")]);
commonModules$clusts1[i] <- list(clusts1[x[i],clusts1[x[i],]!=""])
commonModules$clusts2[i] <- list(clusts2[y[i],clusts2[y[i],]!=""])
y[i]
clusts2[3,]
clusts2 <- clusts2[,colSums(is.na(clusts2))==0]
commonModules$clusts2[i] <- list(clusts2[y[i],clusts2[y[i],]!=""])
commonModules

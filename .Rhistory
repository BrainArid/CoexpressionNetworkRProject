Data$ma_can <- NULL;
Data$rs_con <- NULL;
Data$rs_can <- NULL;
rm(maControlFiles, maCancerFiles, rsControlFiles, rsCancerFiles);
#take intersection of genes between micro array and rnaseq set
print("Calculating intersection of genes.");
sharedGenes <- intersect(row.names(Data$ma), row.names(Data$rs_raw));
Data$ma <- Data$ma[sharedGenes,];
Data$rs_raw <- Data$rs_raw[sharedGenes,];
remove(sharedGenes);
Data$rs_raw <- matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw)));
print("Begin normalization:")
biocLite("easyRNASeq")
source("http://bioconductor.org/biocLite.R");
print("RPKM normalization:")
biocLite("easyRNASeq")
library("easyRNASeq")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
biocLite("org.Hs.eg.db")
hg19GeneLengths <- function(symbols)
{
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )
egs <- sapply(egs,function(eg)
=======
Data$rs_RPKM
args$normFlagRPKM && is.null(Data$rs_RPKM)
expMatrix <- Data$rs_raw
head(row.names(expMatrix))
symbols <- row.names(expMatrix)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )
head(egs)
sapply(egs,function(eg)
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
head(egs)
egsFull <- egs
egs <- egs[1:5]
egs
sapply(egs,function(eg)
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
egs <- egsFull
sapply(egs,function(eg)
>>>>>>> Stashed changes
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
<<<<<<< Updated upstream
return (egs);
}
rpkm <- function(expMatrix)
{
#RPKM = (10^9 * C)/(N * L), with
#C = Number of reads mapped to a gene
#N = Total mapped reads in the experiment
#L = gene length in base-pairs for a gene
symbols <- row.names(expMatrix);
lengths <- hg19GeneLengths(symbols);
I<- intersect(names(lengths),symbols);
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(X){return(X/sum(X))})
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
return(rpkmMat);
}
Data$rs_RPKM <- rpkm(Data$rs_raw);
=======
head(egs)
egsCalc <- .Last.value
head(egsCalc)
egs <- sapply(egs,function(eg)
{
exons = exons.db[[eg]]
if(is.null(exons))
{return (0)}
exons = reduce(exons)
sum( width(exons) )
})
head(egs)
lengths <- as.numeric(egs)
I<- intersect(names(lengths),row.names(expMatrix));
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
Data$rs_RPKM <- rpkmMat
head(Data$rs_RPKM)
head(lengths)
head(egs)
head(as.numeric(egs))
I
lengths<-egs
I<- intersect(names(lengths),row.names(expMatrix));
head(I)
head(names(lengths))
head(row.names(expMatrix))
head(expMatrix)
expMatrix[1:2,1:2]
head(row.names(expMatrix))
head(col.names(expMatrix))
head(colnames(expMatrix))
Data$rs_raw[1:2,1:2]
row.names(Data$rs_raw[1:2,1:2])
row.names(expMatrix)
I<- intersect(names(lengths),symbols);
head(I)
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
head(rpkmMat)
head(lengths)
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})
head(rpkmMat)
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(X){return(X/sum(X))})
head(rpkmMat)
head(expMatrix)
head(egs)
expMatrix<-Data$rs_raw
symbols <- row.names(expMatrix);
head(symbols)
head(expMatrix)
lengths<-egs
I<- intersect(names(lengths),symbols);
head(I)
head(expMatrix[I,])
expMatrix <- expMatrix[I,];
lengths <- lengths[I];
rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(X){return(X/sum(X))})
head(rpkmMat)
rpkmMat <- 10^9 * rpkmMat
rpkmMat <- rpkmMat / as.numeric(lengths);
head(rpkmMat)
Data$rs_RPKM<-rpkmMat
#DESeq variance stableizing transformation (VST) normalization
>>>>>>> Stashed changes
if(args$normFlagDESeq && is.null(Data$rs_DESeq))
{
print("DESeq normalization:");
#source("http://bioconductor.org/biocLite.R");
biocLite("DESeq2");
library("DESeq2");
colData <- DataFrame(condition=c(rep(x="control",times=Data$conCount), rep(x="cancer", times=Data$canCount)), type=c(rep(x="single-read",times=Data$conCount+Data$canCount)));
#row.names(colData) <- colnames(countData);
dds <- DESeqDataSetFromMatrix(countData=matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw))), design = ~ condition,colData=colData);
dds <- DESeq(dds);
dds$condition <- factor(dds$condition, levels=c("cancer","control"));
res <- results(dds);
res$log2FoldChange<- -res$log2FoldChange;#reverse direction of test
if(args$diffExprsFlag)
{
#DESeq differential Expression
resOrdered <- res[order(res$padj),];
head(resOrdered);
n <- 150;
<<<<<<< Updated upstream
write.csv(resOrdered,file=paste0("DiffExpression DesSEQ.csv"),quote=FALSE,);
=======
write.csv(resOrdered,file=paste("DiffExpression DesSEQ.csv"),quote=FALSE,);
>>>>>>> Stashed changes
rm(resOrdered);
}
Data$rs_DESeq <- t( t(counts(dds)) / sizeFactors(dds) );
}
#EdgeR does not do cross sample normalization
#source("http://bioconductor.org/biocLite.R")
#biocLite("edgeR")
#library("edgeR")
#total ubiquetous normalization as per "Optimal scaling of Digital Transcriptomes" By Glusman et al.
if(args$normFlagUbi && is.null(Data$rs_Ubi))
{
print("Total ubiquitous normalization:");
#setwd("CoexpressionNetworkProject/")
source("CoexpressionNetworkRProject/ubiquitousNormalize.R");
source("CoexpressionNetworkRProject/getUbiquitousGeneSet.R");
source("CoexpressionNetworkRProject/getTrimmedSet_UbiquitousHelper.R");
Data$rs_Ubi <- ubiquitousNormalize(Data$rs_raw,lowerPercentile=0.3,upperPercentile=0.85);
#setwd("..")
}
#quantile
if(args$normFlagQuant && is.null(Data$rs_quant))
{
print("Quantile normalization:");
source('http://bioconductor.org/biocLite.R');
biocLite('preprocessCore');
#load package
library(preprocessCore);
#quantile differential expression
#...
Data$rs_quant <- normalize.quantiles(x= Data$rs_raw, copy=TRUE);
}
<<<<<<< Updated upstream
if(args$saveNormalizationRDS)
{
saveRDS(Data, file="normalization.RDS")
}
library("DESeq2");
library("DESeq2", lib.loc="C:/Users/Student/Documents/R/win-library/3.1")
colData <- DataFrame(condition=c(rep(x="control",times=Data$conCount), rep(x="cancer", times=Data$canCount)), type=c(rep(x="single-read",times=Data$conCount+Data$canCount)));
dds <- DESeqDataSetFromMatrix(countData=matrix(data=mapply(x=as.matrix(Data$rs_raw), FUN=as.integer),nrow = dim(Data$rs_raw)[1],ncol=dim(Data$rs_raw)[2],dimnames = list(row.names(Data$rs_raw), colnames(Data$rs_raw))), design = ~ condition,colData=colData);
.libPaths()
.libPaths
.libPaths()
library("DESeq", lib.loc="C:/Users/Student/Documents/R/win-library/3.1")
detach("package:DESeq", unload=TRUE)
detach("package:DESeq2", unload=TRUE)
library("DESeq2", lib.loc="C:/Users/Student/Documents/R/win-library/3.1")
detach("package:DESeq2", unload=TRUE)
library("DESeq2",lib.loc=.libPaths()[1])
.libPaths()[1]
biocLite("DESeq2");
=======
head(x = Data$ma)
head(x = Data$rs_raw)
head(x = Data$rs_RPKM)
head(x = Data$rs_DESeq)
head(x = Data$rs_Ubi)
head(x = Data$rs_quant)
saveRDS(Data, file="normalization.RDS")
View(expMatrix)
>>>>>>> Stashed changes
biocLite("make4")
source("http://bioconductor.org/biocLite.R")
biocLite("make4")
biocLite("made4")
library("made4")
getwd()
Data <- readRDS("normalization.RDS");
Data <- readRDS("normalizationData.RDS");
fix(Data)
Data
Data <- readRDS("normalizationData.RDS");
Data <- readRDS("../normalization.RDS");
ciaObj <- cia(Data$ma, Data$rs_DESeq, cia.nf=2, cia.scan=FALSE, nsc=TRUE,...)
ciaObj <- cia(Data$ma, Data$rs_DESeq, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
plot.cia(ciaObj, nlab = 10, axes1 = 1, axes2 = 2, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
cia_ma_ma<- cia(Data$ma, Data$ma, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
cia_raw_DESeq  <- cia(Data$rs_raw, Data$rs_DESeq, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
head(Data$rs_raw)
cia_raw_DESeq  <- cia(Data$rs_raw, Data$rs_DESeq, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
Data$rs_raw[1,1]
Data$rs_raw[rowSums(Data$rs_raw==0)==dim(Data$rs_raw)[2],1]
Data$rs_raw[rowSums(Data$rs_raw==0)==dim(Data$rs_raw)[2],1:10]
? cia
cia_raw_DESeq  <- cia(Data$rs_RPKM, Data$rs_DESeq, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
warnings()
fix(Data)
mem
memory()
cia_raw_DESeq  <- cia(Data$rs_RPKM, Data$rs_DESeq, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
rm(ciaObj)
cia_ma_ma<- cia(Data$ma, Data$ma, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
library("made4")
Data <- readRDS("../normalization.RDS");
cia_ma_ma<- cia(Data$ma, Data$ma, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
png(filename="cia_ma_ma.png");
plot.cia(cia_ma_ma, nlab = 10, axes1 = 1, axes2 = 2, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
png(filename="cia_ma_ma.png");
plot.cia(cia_ma_ma, nlab = 10, axes1 = 1, axes2 = 2, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
dev.off();
plot.cia(cia_ma_ma, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
png(filename="cia_ma_ma.png");
plot.cia(cia_ma_ma, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
rm(cia_ma_ma)
fix(Data)
gc(verbose=TRUE)
cia_rpkm_DESeq  <- cia(Data$rs_RPKM, Data$rs_DESeq, cia.nf=2, cia.scan=FALSE, nsc=TRUE)
mem_used()
function(d1,d1, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
function(d1,d2, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
ciaAndPlot <- function(d1,d2, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png");
ciaAndPlot(Data$ma, Data$rs_DESeq, "cia_ma_DESeq.png");
library("made4")
ciaAndPlot <- function(d1,d2, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 10, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
ciaAndPlot(Data$rs_RPKM, Data$rs_DESeq, "cia_RPKM_DESeq.png");
? plot.cia
library("made4")
d1 <- Data$ma
library("made4")
ciaAndPlot <- function(d1,d2, filename)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
d1 <- Data$ma
d2 <- Data$rs_DESeq
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
plot.cia(ciaObj, nlab = 0, genecol = "gray25",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
plot.cia(ciaObj, nlab = 0, genecol = "red",genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
plot.cia(ciaObj, nlab = 0, genecol = c("red","blue"),genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq))
plot.cia(ciaObj, nlab = 0, genecol = c("red","blue"),genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col="green")
rep(x="h",time=4)
plot.cia(ciaObj, nlab = 0, genecol = c("red","blue"),genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=rep("green",times=97)
)
sampleColors<- c(rep("blue",6), rep("orange",91))
sampleColors
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png",sampleColors,genecolors);
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE, sampleCounts=c(-1));
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
rm(ciaObj);
}
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
rm(ciaObj);
}
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png",sampleColors,genecolors);
head(ciaObj$call$df1)
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
d1 <- Data$ma
d2 <- Data$rs_DESeq
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
head(names(d1))
names(d1)<-NULL;
names(d2)<-NULL;
ciaObj <- cia(d1, d2, cia.nf=2, cia.scan=FALSE, nsc=TRUE);
head(d1)
mode(d1)
head(as.matrix(d1))
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors)
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, labs=NULL)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, labs=NULL)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
d1<- Data$ma
d2<- Data$rs_DESeq
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, labs=NULL)
plot.cia
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, label=NULL)
s.match.col
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=NULL)
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
filename<-"cia_ma_ma.png"
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
dev.off();
ciaAndPlot(Data$ma, Data$rs_DESeq, "cia_ma_DESeq.png");
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_RPKM, Data$rs_DESeq, "cia_RPKM_DESeq.png");
ciaAndPlot(Data$rs_RPKM, Data$rs_DESeq, "cia_RPKM_DESeq.png",sampleColors, geneColors);
Data <- readRDS("../normalization.RDS");
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
rm(ciaObj);
}
ciaAndPlot(Data$rs_DESeq, Data$rs_Ubi, "cia_DESeq_Ubi.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_DESeq, Data$rs_quant, "cia_DESeq_quant.png",sampleColors, geneColors);
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$rs_DESeq, Data$rs_Ubi, "cia_DESeq_Ubi.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_DESeq, Data$rs_quant, "cia_DESeq_quant.png",sampleColors, geneColors);
library("made4")
ciaAndPlot <- function(d1,d2, filename, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91))
geneColors<- "red";#c(rep("blue",6), rep("orange",91))
ciaAndPlot(Data$rs_DESeq, Data$rs_quant, "cia_DESeq_quant.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_DESeq, Data$rs_raw, "cia_DESeq_raw.png",sampleColors, geneColors);
ciaAndPlot(Data$rs_DESeq, Data$rs_Ubi, "cia_DESeq_Ubi.png",sampleColors, geneColors);
library("made4")
ciaAndPlot <- function(d1,d2, filename, title, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, main=title)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, main=title)
rm(ciaObj);
}
Data <- readRDS("../normalization.RDS");
sampleColors<- c(rep("blue",6), rep("orange",91));
geneColors<- "red";#c(rep("blue",6), rep("orange",91));
ciaAndPlot(Data$ma, Data$ma, "cia_ma_ma.png", "Microarray Vs Microarray", sampleColors, geneColors);
ciaAndPlot <- function(d1,d2, filename, title, sampleColors, geneColors)
{
ciaObj <- cia(as.matrix(d1), as.matrix(d2), cia.nf=2, cia.scan=FALSE, nsc=TRUE);
png(filename=filename);
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, title=title)
dev.off();
plot.cia(ciaObj, nlab = 0, genecol = geneColors,genelabels1 = rownames(Data$ma), genelabels2 = rownames(Data$rs_DESeq), col=sampleColors, clabel=0, title=title)
rm(ciaObj);
}
ciaAndPlot(Data$rs_RPKM, Data$rs_DESeq, "cia_RPKM_DESeq.png", "RPKM Vs DESeq",sampleColors, geneColors);

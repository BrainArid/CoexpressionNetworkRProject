{
    "contents" : "# Display the current working directory\ngetwd();\n# If necessary, change the path below to the directory where the data files are stored.\n# \".\" means current directory. On Windows use a forward slash / instead of the usual \\.\nworkingDir = \"C:/Users/Student/My Research/microArray v RNA Seq/Data/WGCNA Tutorial Datasets/\";\nsetwd(workingDir);\n# Load the package\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"impute\")\nlibrary(WGCNA);\n# The following setting is important, do not omit.\noptions(stringsAsFactors = FALSE);\n#Read in the female liver data set\nfemData = read.csv(\"FemaleLiver-Data/LiverFemale3600.csv\");\n# Read in the male liver data set\nmaleData = read.csv(\"MaleLiver-Data/LiverMale3600.csv\");\n# Take a quick look at what is in the data sets (caution, longish output):\ndim(femData)\nnames(femData)\ndim(maleData)\nnames(maleData)\n\n# We work with two sets:\nnSets = 2;\n# For easier labeling of plots, create a vector holding descriptive names of the two sets.\nsetLabels = c(\"Female liver\", \"Male liver\")\nshortLabels = c(\"Female\", \"Male\")\n# Form multi-set expression data: columns starting from 9 contain actual expression data.\nmultiExpr = vector(mode = \"list\", length = nSets)\nmultiExpr[[1]] = list(data = as.data.frame(t(femData[-c(1:8)])));\nnames(multiExpr[[1]]$data) = femData$substanceBXH;\nrownames(multiExpr[[1]]$data) = names(femData)[-c(1:8)];\nmultiExpr[[2]] = list(data = as.data.frame(t(maleData[-c(1:8)])));\nnames(multiExpr[[2]]$data) = maleData$substanceBXH;\nrownames(multiExpr[[2]]$data) = names(maleData)[-c(1:8)];\n# Check that the data has the correct format for many functions operating on multiple sets:\nexprSize = checkSets(multiExpr)\n\n# Check that all genes and samples have sufficiently low numbers of missing values.\ngsg = goodSamplesGenesMS(multiExpr, verbose = 3);\ngsg$allOK\n\nif (!gsg$allOK)\n{\n  # Print information about the removed genes:\n  if (sum(!gsg$goodGenes) > 0)\n    printFlush(paste(\"Removing genes:\", paste(names(multiExpr[[1]]$data)[!gsg$goodGenes],\n                                              collapse = \", \")))\n  for (set in 1:exprSize$nSets)\n  {\n    if (sum(!gsg$goodSamples[[set]]))\n      printFlush(paste(\"In set\", setLabels[set], \"removing samples\",\n                       paste(rownames(multiExpr[[set]]$data)[!gsg$goodSamples[[set]]], collapse = \", \")))\n    # Remove the offending genes and samples\n    multiExpr[[set]]$data = multiExpr[[set]]$data[gsg$goodSamples[[set]], gsg$goodGenes];\n  }\n  # Update exprSize\n  exprSize = checkSets(multiExpr)\n}\n\nsampleTrees = list()\nfor (set in 1:nSets)\n{\n  sampleTrees[[set]] = hclust(dist(multiExpr[[set]]$data), method = \"average\")\n}\n\npdf(file = \"Plots/SampleClustering.pdf\", width = 12, height = 12);\npar(mfrow=c(2,1))\npar(mar = c(0, 4, 2, 0))\nfor (set in 1:nSets)\n  plot(sampleTrees[[set]], main = paste(\"Sample clustering on all genes in\", setLabels[set]),\n       xlab=\"\", sub=\"\", cex = 0.7);\ndev.off();\n\n# Choose the \"base\" cut height for the female data set\nbaseHeight = 16\n# Adjust the cut height for the male data set for the number of samples\ncutHeights = c(16, 16*exprSize$nSamples[2]/exprSize$nSamples[1]);\n# Re-plot the dendrograms including the cut lines\npdf(file = \"Plots/SampleClustering.pdf\", width = 12, height = 12);\npar(mfrow=c(2,1))\npar(mar = c(0, 4, 2, 0))\nfor (set in 1:nSets)\n{\n  plot(sampleTrees[[set]], main = paste(\"Sample clustering on all genes in\", setLabels[set]),\n       xlab=\"\", sub=\"\", cex = 0.7);\n  abline(h=cutHeights[set], col = \"red\");\n}\ndev.off();\n\n#outlier removal\nfor (set in 1:nSets)\n{\n  # Find clusters cut by the line\n  labels = cutreeStatic(sampleTrees[[set]], cutHeight = cutHeights[set])\n  # Keep the largest one (labeled by the number 1)\n  keep = (labels==1)\n  multiExpr[[set]]$data = multiExpr[[set]]$data[keep, ]\n}\ncollectGarbage();\n3# Check the size of the leftover data\nexprSize = checkSets(multiExpr)\nexprSize\n\n#Load clinical train data\ntraitData = read.csv(\"FemaleLiver-Data/ClinicalTraits.csv\");\ndim(traitData)\nnames(traitData)\n# remove columns that hold information we do not need.\nallTraits = traitData[, -c(31, 16)];\nallTraits = allTraits[, c(2, 11:36) ];\n# See how big the traits are and what are the trait and sample names\ndim(allTraits)\nnames(allTraits)\nallTraits$Mice\n# Form a multi-set structure that will hold the clinical traits.\nTraits = vector(mode=\"list\", length = nSets);\nfor (set in 1:nSets)\n{\n  setSamples = rownames(multiExpr[[set]]$data);\n  traitRows = match(setSamples, allTraits$Mice);\n  Traits[[set]] = list(data = allTraits[traitRows, -1]);\n  rownames(Traits[[set]]$data) = allTraits[traitRows, 1];\n}\ncollectGarbage();\n# Define data set dimensions\nnGenes = exprSize$nGenes;\nnSamples = exprSize$nSamples;\n\nsave(multiExpr, Traits, nGenes, nSamples, setLabels, shortLabels,\n     file = \"Consensus-dataInput.RData\");\n#Tutorial PART 1 complete\n",
    "created" : 1412473206466.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4130879992",
    "id" : "411C2A4E",
    "lastKnownWriteTime" : 1407524736,
    "path" : "C:/Users/Student/My Research/microArray v RNA Seq/CoexpressionNetworkRProject/WGCNATutorialScript.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
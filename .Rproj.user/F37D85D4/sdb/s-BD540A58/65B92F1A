{
    "contents" : "print(\"Setting workingDirectory\");\n#workingDirectories <- c(\"/home/barand/microArray_v_RNASeq/\",\"C:/Users/Student/My Research/microArray v RNA Seq/\");\n#for(wd in workingDirectories)\n#  setwd(wd);\n\nsetwd(\"C:/Users/Student/My Research/microArray v RNA Seq/\");\n\nsource(\"http://bioconductor.org/biocLite.R\");\n\n#import data\nprint(\"Importing data files.\");\nmaDir <- \"Data/BRCA/Batch 47/Expression-Genes/UNC__AgilentG4502A_07_3/Level_3/\";\nrsDir <- \"Data/BRCA/Batch 47/RNASeqV2/UNC__IlluminaHiSeq_RNASeqV2/Level_3/\";\n#mafiles <- list.files(path=maDir, pattern=\"*.txt\", full.names=T, recursive=FALSE);\n#rsfiles <- list.files(path=rsDir, pattern=\"*.rsem.genes.results\", full.names=T, recursive=FALSE);\n\n#Metadata\nmetaData <- read.table(file=\"Data/BRCA/Batch 47/file_manifest.txt\",header=TRUE);\nmetaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool\nmetaData[,6] <- gsub(pattern=\"-\",replacement=\".\", x=metaData[,6]);#replace '-' with '.' to make mapping easier later\n\nmaControlFiles <- paste(sep='', maDir ,as.character(metaData[metaData[,\"control\"] & metaData[,\"PlatformType\"]==\"Expression-Genes\" ,\"FileName\"]));\nmaCancerFiles <- paste(sep='', maDir ,as.character(metaData[!metaData[,\"control\"] & metaData[,\"PlatformType\"]==\"Expression-Genes\" ,\"FileName\"]));\nrsControlFiles <- paste(sep='', rsDir ,as.character(metaData[metaData[,\"control\"] & metaData[,\"PlatformType\"]==\"RNASeqV2\" & grepl(x=metaData[,\"FileName\"], pattern=\"*.rsem.genes.results\") ,\"FileName\"]));\nrsCancerFiles <- paste(sep='', rsDir ,as.character(metaData[!metaData[,\"control\"] & metaData[,\"PlatformType\"]==\"RNASeqV2\" & grepl(x=metaData[,\"FileName\"], pattern=\"*.rsem.genes.results\") ,\"FileName\"]));\n\nsource(\"CoexpressionNetworkProject/constructCrossSampleFrame.R\");\nmaConData <- constructCrossSampleFrame(inFiles=maControlFiles,rows2Ignore=c(1));\nmaCanData <- constructCrossSampleFrame(inFiles=maCancerFiles,rows2Ignore=c(1));\nrsConData <- constructCrossSampleFrame(inFiles=rsControlFiles,cols2Ignore=c(3,4));\nrsCanData <- constructCrossSampleFrame(inFiles=rsCancerFiles,cols2Ignore=c(3,4));\nrsRPKMData <- constructCrossSampleFrame(inFiles=c(rsControlFiles,rsCancerFiles),cols2Ignore=c(2,3));\n#remove(mafiles);\n#remove(rsfiles);\nremove(maControlFiles);\nremove(maCancerFiles);\nremove(rsControlFiles);\nremove(rsCancerFiles);\n\n#take intersection of genes between micro array and rnaseq set\nprint(\"Calculating intersection of genes.\");\nsource(\"CoexpressionNetworkProject/trim_TCGA_RNASeq_GeneNames.R\");\n#rsData <- trim_TCGA_RNASeq_GeneNames(rsData);\nrsConData <- trim_TCGA_RNASeq_GeneNames(rsConData);\nrsCanData <- trim_TCGA_RNASeq_GeneNames(rsCanData);\n#rsRPKMData <- trim_TCGA_RNASeq_GeneNames(rsRPKMData);\n\nsharedGenes <- intersect(row.names(maConData), row.names(rsConData));\nmaConData <- maConData[sharedGenes,];\nrsConData <- rsConData[sharedGenes,];\nmaCanData <- maCanData[sharedGenes,];\nrsCanData <- rsCanData[sharedGenes,];\n#rsRPKMData <- rsRPKMData[sharedGenes,];\nremove(sharedGenes);\nconCount <- dim(maConData)[2];\ncanCount <- dim(maCanData)[2];\n\n#normalize\n#RMKM\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"easyRNASeq\")\nlibrary(\"easyRNASeq\")\n\nbiocLite(\"TxDb.Hsapiens.UCSC.hg19.knownGene\")\nbiocLite(\"org.Hs.eg.db\")\nhg19GeneLengths <- function(symbols)\n{\n  require(TxDb.Hsapiens.UCSC.hg19.knownGene) \n  require(org.Hs.eg.db)\n  exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')    \n  egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )\n  sapply(egs,function(eg)\n  {\n    exons = exons.db[[eg]]\n    if(is.null(exons))\n    {return (0)}\n    exons = reduce(exons)\n    sum( width(exons) )\n  })\n  return as.numberic(egs);\n}\nrpkm <- function(expMatrix)\n{\n  #RPKM = (10^9 * C)/(N * L), with\n  #C = Number of reads mapped to a gene\n  #N = Total mapped reads in the experiment\n  #L = gene length in base-pairs for a gene\n  lengths <- hg19GeneLengths(row.names(expMatrix));\n  I<- intersect(names(lengths),row.names(expMatrix));\n  expMatrix <- expMatrix[I,];\n  lengths <- lengths[I];\n  rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})\n  rpkmMat <- 10^9 * rpkmMat \n  rpkmMat <- rpkmMat / as.numeric(lengths);\n  return(rpkmMat);\n}\n\nrsData_RPKM <- rpkm(countData);\n\n#DESeq\nsource(\"http://bioconductor.org/biocLite.R\");\nbiocLite(\"DESeq2\");\nlibrary(\"DESeq2\");\n\ncountData <- mapply(x=as.matrix(c(rsConData, rsCanData)), FUN=as.integer);\nrow.names(countData) <- row.names(rsConData);\ncolData <- DataFrame(condition=c(rep(x=\"control\",times=conCount), rep(x=\"cancer\", times=canCount)), type=c(rep(x=\"single-read\",times=conCount+canCount)));\n#row.names(colData) <- colnames(countData);\ndds <- DESeqDataSetFromMatrix(countData=countData, design = ~ condition,colData=colData);\ndds <- DESeq(dds);\ndds$condition <- factor(dds$condition, levels=c(\"cancer\",\"control\"));\nres <- results(dds);\nres$log2FoldChange<- -res$log2FoldChange;#reverse direction of test\n\n#DESeq differential Expression\nresOrdered <- res[order(res$padj),];  \nhead(resOrdered);\nn <- 150;\nwrite.csv(resOrdered,file=paste(\"DiffExpression DesSEQ.csv\"),quote=FALSE,);\n\nnormalizedCounts_DESeq2 <- t( t(counts(dds)) / sizeFactors(dds) );\nrsConData_norm_DESeq2 <- normalizedCounts_DESeq2[,1:conCount];\nrsCanData_norm_DESeq2 <- normalizedCounts_DESeq2[,conCount+1:canCount];\nrow.names(rsConData_norm_DESeq2) <- row.names(normalizedCounts_DESeq2);\nrow.names(rsCanData_norm_DESeq2) <- row.names(normalizedCounts_DESeq2);\nremove(normalizedCounts_DESeq2);\nrm(resOrdered);\n\n#EdgeR does not do cross sample normalization\n#source(\"http://bioconductor.org/biocLite.R\")\n#biocLite(\"edgeR\")\n#library(\"edgeR\")\n\n#VST as per \"Comparative study of RNA-seq...coexpression networks in Arabidopsis thaliana\" By Giorgi et al.\n\n#total ubiquetous normalization as per \"Optimal scaling of Digital Transcriptomes\" By Glusman et al.\nsetwd(\"CoexpressionNetworkProject/\")\nsource(\"ubiquitousNormalize.R\");\nrsData_Ubi <- ubiquitousNormalize(countData,lowerPercentile=0.3,upperPercentile=0.85);\nsetwd(\"..\")\n\n#quantile\nsource('http://bioconductor.org/biocLite.R');\nbiocLite('preprocessCore');\n#load package\nlibrary(preprocessCore);\n\n#quantile differential expression\n#...\n\nnormalizedCounts_quant <- normalize.quantiles(x= countData, copy=TRUE);\nrsConData_norm_quant <- normalizedCounts_quant[,1:conCount];\nrsCanData_norm_quant <- normalizedCounts_quant[,conCount+1:canCount];\nremove(normalizedCounts_quant);\n\n#microarray differential expression\n#may not be working... produces rediculously small p-values\nsource(\"http://bioconductor.org/biocLite.R\");\nbiocLite( \"limma\");\nlibrary(\"limma\");\n\ncondition=c(rep(x=\"control\",times=dim(x=rsConData)[2]), rep(x=\"cancer\", times=canCount));\ncombn <- factor(paste(pData(phenoData)[,1], pData(phenoData)[,2], sep = \"_\"));\ndesign <- model.matrix(~condition);# describe model to be fit\n\nfit <- lmFit(cbind(maConData, maCanData), design);# fit each probeset to model\nefit <- eBayes(fit);# empirical Bayes adjustment\nwrite.csv(topTable(efit, coef=2, number=length(efit$p.value)), file=paste(\"DiffExpression MicroArray.csv\"),quote=FALSE);\n\n#significance comparison\nmaPRank <- rank(efit$p.value[,2]);\nrsPRank <- rank(res$padj);\nnames(rsPRank) <- row.names(res);\nmaPRank <- maPRank[sort(names(maPRank))];\nrsPRank <- rsPRank[sort(names(rsPRank))];\nplot2Groups(GroupA=maPRank, GroupB=rsPRank, xlab=\"MicroArray Rank\", ylab=\"RNASeq Rank\", main=\"DEG Rank comparison by p-value\", file=\"Comp_DEG_pVal_rank_across_tech.png\");\nRs_PRank <- cor(x=maPRank, y=rsPRank, method=\"spearman\");\nrm(maPRank);\nrm(rsPRank);\n\n#log foldchange comparison\nmaFC <- topTable(efit, coef=2, number=length(efit$p.value))[,1];\nnames(maFC) <- row.names(topTable(efit, coef=2, number=length(efit$p.value)));\nmaFCRank <- rank(maFC);\nrsFC <- res$log2FoldChange;\nnames(rsFC) <- row.names(res);\nrsFCRank <- rank(rsFC);\nmaFCRank <- maFCRank[sort(names(maFCRank))];\nrsFCRank <- rsFCRank[sort(names(rsFCRank))];\nplot2Groups(GroupA=maFCRank, GroupB=rsFCRank, xlab=\"MicroArray Rank\", ylab=\"RNASeq Rank\", main=\"Log2 Fold Change Rank comparison\", file=\"Comp_FC_rank_across_tech.png\");\nRs_FCRank <- cor(x=maFCRank, y=rsFCRank, method=\"spearman\");\nrm(maFCRank);\nrm(rsFCRank);\n\nmaRankData<-apply(maData,MARGIN=2,FUN=rank);\nrsRankData<-apply(rsData,MARGIN=2,FUN=rank);\n\n#plot means\nsource(\"CoexpressionNetworkProject/plot2Groups.R\");\nmaData<- cbind(maConData, maCanData, maFC, maP);\nrsData_DESeq2 <- cbind(rsConData_norm_DESeq2, rsCanData_norm_DESeq2);\nrsData_quant <- cbind(rsConData_norm_quant, rsCanData_norm_quant);\n\nplot2Groups(rowMeans(maData, na.rm = TRUE), log(rowMeans(rsData_DESeq2, na.rm = TRUE)),main=\"Micro Array vs RNASeq DESeq gene means (91 paired patient samples)\",xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq DEseq counts\", file=\"Comp_gene_means_across_tech_DESeq.png\", histA=TRUE, histB=TRUE);\nplot2Groups(apply(maData,1,median, na.rm = TRUE), apply(log(rsData_DESeq2),1,median, na.rm = TRUE),main=\"Micro Array vs RNASeq DESeq gene medians (91 paired patient samples)\",xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq DESeq counts\", file=\"Comp_gene_medians_across_tech_DESeq.png\", histA=TRUE, histB=TRUE);\nplot2Groups(rowMeans(apply(maData,MARGIN=2,FUN=rank), na.rm = TRUE), rowMeans(apply(rsData_DESeq2,MARGIN=2,FUN=rank), na.rm = TRUE),main=\"Micro Array vs RNASeq DESeq gene mean ranks (91 paired patient samples)\",xlab=\"Ranked Lowess Normalized MicroArray\",ylab=\"Log RNASeq DESeq counts\", file=\"Ranked Comp_gene_mean_rank_across_tech_DESeq.png\");\nplot2Groups(apply(apply(maData,MARGIN=2,FUN=rank), 1,median, na.rm = TRUE), apply(apply(rsData_DESeq2,MARGIN=2,FUN=rank),1,median, na.rm = TRUE),main=\"Micro Array vs RNASeq DESeq gene median ranks (91 paired patient samples)\",xlab=\"Ranked Lowess Normalized MicroArray\",ylab=\"Ranked Log RNASeq DESeq counts\", file=\"Comp_gene_median_rank_across_tech_DESeq.png\");\n\nplot2Groups(rowMeans(maData, na.rm = TRUE), log(rowMeans(rsData_quant, na.rm = TRUE)),main=\"Micro Array vs RNASeq quant gene means (91 paired patient samples)\",xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq quant counts\", file=\"Comp_gene_means_across_tech_quant.png\", histA=TRUE, histB=TRUE);\n\nGeneID=3245;\nGeneName= row.names(maData)[GeneID];\nplot2Groups(t(maData[GeneID,]), t(log(rsData_DESeq2[GeneID,])),main=paste(\"Micro Array vs RNASeq DESeq (\", GeneName, \")\"),xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq DESeq counts\", file=paste(\"Comp_gene_across_tech_DESeq-\",GeneName,\".png\"));\n#plot2Groups(t(maRankData[GeneID,]), t(rsRankData[GeneID,]),main=paste(\"Micro Array vs RNASeq ranks DESeq (\", GeneName, \")\"),xlab=\"Ranked Lowess Normalized MicroArray\",ylab=\"Ranked Log RNASeq DESeq counts\", file=paste(\"Comp_gene_rank_across_tech_DESeq-\",GeneName,\".png\"));\nplot2Groups(t(maData[GeneID,]), t(log(rsData_quant[GeneID,])),main=paste(\"Micro Array vs RNASeq quant (\", GeneName, \")\"),xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq quant counts\", file=paste(\"Comp_gene_across_tech_quant-\",GeneName,\".png\"));\n\n#check normalizations with boxplots\npng(filename=\"MicroArray normalization check.png\");\nboxplot(x=maData,names=seq(1,dim(maData)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"expression value\");\ndev.off();\npng(filename=\"RNASeq Count normalization check.png\");\nboxplot(x=log(rsData),names=seq(1,dim(rsData)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq counts\");\ndev.off();\npng(filename=\"RNASeq RPKM normalization check.png\");\nboxplot(x=log(rsRPKMData),names=seq(1,dim(rsRPKMData)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq RPKM\");\ndev.off();\npng(filename=\"RNASeq DESeq normalization check.png\");\nboxplot(x=log(cbind(rsConData_norm_DESeq2, rsCanData_norm_DESeq2)),names=seq(1,dim(rsConData_norm_DESeq2)[2]+dim(rsCanData_norm_DESeq2)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq DESeq normalized\");\ndev.off();\npng(filename=\"RNASeq quantile normalization check.png\");\nboxplot(x=log(cbind(rsConData_norm_quant, rsCanData_norm_quant)),names=seq(1,dim(rsConData_norm_quant)[2]+dim(rsCanData_norm_quant)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq quan normalized\");\ndev.off();\npng(filename=\"RNASeq total ubiquitous normalization check.png\");\nboxplot(x=log(rsData_Ubi),names=seq(1,dim(rsConData_norm_quant)[2]+dim(rsCanData_norm_quant)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq total ubiquitous normalized\");\ndev.off();\n\n#subset by significance\nsubBySig <- FALSE;\nif(subBySig)\n{\n  cutoff<- 0.0000001;\n  filter <- efit.p.adj<cutoff & !is.na(efit.p.adj);\n  maGenes<- as.matrix(cbind(efit.p.adj[filter], maConData[filter,],maCanData[filter,]));#attach adjusted p value now\n  filter <- res$padj<cutoff & !is.na(res$padj);\n  rsGenes<- as.matrix(cbind(res$padj[filter], rsConData_norm_DESeq2[filter,],rsCanData_norm_DESeq2[filter,]));#attach adjusted p value now\n}\nelse #subset by rank top X most significant\n{\n  cutoff <- 12000;\n  filter <- rank(efit.p.adj)<=cutoff & !is.na(efit.p.adj);\n  maGenes<- as.matrix(cbind(efit.p.adj[filter], maConData[filter,],maCanData[filter,]));#attach adjusted p value now\n  filter <- rank(res$padj)<=cutoff & !is.na(res$padj);\n  rsGenes<- as.matrix(cbind(res$padj[filter], rsConData_norm_DESeq2[filter,],rsCanData_norm_DESeq2[filter,]));#attach adjusted p value now\n}\n\n#intersection of technology significant genes and output venn diagram gene lists\nfilter <- intersect(row.names(maGenes), row.names(rsGenes));\nmaIntGenes <- maGenes[filter,];\nrsIntGenes <- rsGenes[filter,];\nmaUniGenes <- maGenes[setdiff(row.names(maGenes),row.names(maIntGenes)),];\nrsUniGenes <- rsGenes[setdiff(row.names(rsGenes),row.names(rsIntGenes)),];\n\n#top genes in each group\nhead(sort(maIntGenes[,1]))\nhead(sort(rsIntGenes[,1]))\nhead(sort(maUniGenes[,1]))\nhead(sort(rsUniGenes[,1]))\n#remove p.values from Gene lists\nmaGenes <- maGenes[,-1];\nrsGenes <- rsGenes[,-1];\n\n#calculated correlation statistics\n\nprint(\"Constructing correlation matricies\");\nmaPearson <- cor(x=t(maData), method=\"pearson\", use=\"complete.obs\");\nmaPearson_hist <- hist(x=maPearson,breaks=100,plot=FALSE);\nwrite.csv(x=maPearson,file=paste(\"Data/BRCA/maPearson_top12000_int.txt\"));\nrm(maPearson);\n\nrsPearson_DESeq <- cor(x=t(rsData_DESeq2), method=\"pearson\", use=\"complete.obs\");\nrsPearson_DESeq_hist <- hist(x=rsPearson_DESeq,breaks=100,plot=FALSE);\nwrite.csv(x=rsPearson_DESeq,file=paste(\"Data/BRCA/rsPearson_top12000_int.txt\"));\nrm(rsPearson_DESeq);\n\nrsPearson_quant <- cor(x=t(rsData_quant), method=\"pearson\", use=\"complete.obs\");\nrsPearson_quant_hist <- hist(x=rsPearson_quant,breaks=100,plot=FALSE);\nrm(rsPearson_quant);\n\nrsPearson_Ubi <- cor(x=t(rsData_Ubi), method=\"pearson\", use=\"complete.obs\");\nrsPearson_Ubi_hist <- hist(x=rsPearson_Ubi,breaks=100,plot=FALSE);\nwrite.csv(x=rsPearson_Ubi,file=paste(\"Data/BRCA/rsPearson_top12000_int.txt\"));\nrm(rsPearson_Ubi);\n\nrsPearson_raw <- cor(x=t(countData), method=\"pearson\", use=\"complete.obs\");\nrsPearson_raw_hist <- hist(x=rsPearson_raw,breaks=100,plot=FALSE);\nrm(rsPearson_raw);\n\nrsPearson_RPKM <- cor(x=t(rsData_RPKM), method=\"pearson\", use=\"complete.obs\");\nrsPearson_RPKM_hist <- hist(x=rsPearson_RPKM,breaks=100,plot=FALSE);\nrm(rsPearson_RPKM);\n\n#plot overlapping histogram of PCC\nmaxy <- 0.08\n# Density plots\nlibrary(\"ggplot2\")\n\nPCC_density_data <- data.frame(\n  PCC=c(\n    maPearson_hist$mids, \n    rsPearson_DESeq_hist$mids, \n    rsPearson_quant_hist$mids, \n    rsPearson_Ubi_hist$mids, \n    rsPearson_raw_hist$mids, \n    rsPearson_RPKM_hist$mids), \n  density=c(\n    maPearson_hist$counts/sum(maPearson_hist$counts),\n    rsPearson_DESeq_hist$counts/sum(rsPearson_DESeq_hist$counts),\n    rsPearson_quant_hist$counts/sum(rsPearson_quant_hist$counts),\n    rsPearson_Ubi_hist$counts/sum(rsPearson_Ubi_hist$counts),\n    rsPearson_raw_hist$counts/sum(rsPearson_raw_hist$counts),\n    rsPearson_RPKM_hist$counts/sum(rsPearson_RPKM_hist$counts)),\n  method=c(\n    rep(x=\"microArray\",times=length(maPearson_hist$counts)),\n    rep(x=\"DESeq\",times=length(rsPearson_DESeq_hist$counts)),\n    rep(x=\"quantile\",times=length(rsPearson_quant_hist$counts)),\n    rep(x=\"Total Ubiquitous\",times=length(rsPearson_Ubi_hist$counts)),\n    rep(x=\"raw\",times=length(rsPearson_raw_hist$counts)),\n    rep(x=\"RPKM\",times=length(rsPearson_RPKM_hist$counts))));\n\npng(filename=\"RNASeq total ubiquitous normalization check.png\");\nggplot(data=PCC_density_data, aes(x=PCC, y=density, group=method, colour=method)) + \n  geom_line(size=1, aes(linetype=method)) +\n  ggtitle(\"PCC density comparison\");\ndev.off();\n\nrm(PCC_density_data);\n\n#diffPearson <- rsPearson - maPearson\n#write.csv(x=diffPearson,file=paste(\"Data/BRCA/diffPearson.txt\"));\n\n#output venn diagram gene lists\n\n#create iGraph and plot\nlibrary(\"igraph\")\n\nwrite.csv(x=maPearson,file=paste(\"Data/BRCA/maPearson_intersection_\", cutoff, \".txt\"));\nrange(maPearson);\npng(filename=paste(\"Data/BRCA/maPearsonHist_intersection_\", cutoff, \".png\"));\nhist(x=maPearson,breaks=20);\ndev.off();\n\nmaGraph <-graph.adjacency(adjmatrix=maPearson*1000,mode=\"undirected\", weighted=TRUE);\n#add vertex attributes to graph\nfor(i in 1:length(V(maGraph)))\n{\n  name <- V(maGraph)[i]$name;\n  V(maGraph)[i]$fc <- maFC[name];\n  V(maGraph)[i]$p <- efit.p.adj[name];\n}\n\nwrite.graph(maGraph, file=paste(\"maGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\n\nwrite.table(x=rsPearson,file=paste(\"Data/BRCA/rsPearson_intersection_\", cutoff, \".txt\"));\nrange(rsPearson);\npng(filename=paste(\"Data/BRCA/rsPearsonHist_intersection_\", cutoff, \".png\"));\nhist(x=rsPearson,breaks=20);\ndev.off();\n\nrsGraph <-graph.adjacency(adjmatrix=rsPearson*1000,mode=\"undirected\", weighted=TRUE);\nfor(i in 1:length(V(rsGraph)))\n{\n  name <- V(rsGraph)[i]$name;\n  V(rsGraph)[i]$fc <- rsFC[name];\n  V(rsGraph)[i]$p <- res[name,]$padj;\n}\n\nwrite.graph(rsGraph, file=paste(\"rsGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\n\nwrite.csv(x=diffPearson,file=paste(\"Data/BRCA/diffPearson_intersection_\", cutoff, \".txt\"));\nrange(diffPearson);\npng(filename=paste(\"Data/BRCA/diffPearsonHist_intersection_\", cutoff, \".png\"));\nhist(x=maPearson,breaks=20);\ndev.off();\n\ndiffGraph <-graph.adjacency(adjmatrix=diffPearson*1000,mode=\"undirected\", weighted=TRUE);\nwrite.graph(diffGraph, file=paste(\"diffGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\n\n#calculate difference network and fold-change network\ndifNet <- rsPearson - maPearson;\nfcNet <- rsPearson / maPearson;\n#visualize network\n\n#scale free networks via WGCNA\n#Load WGCNA package\nlibrary(WGCNA);\n#Load additional necessary packages\nlibrary(cluster);\nk=softConnectivity(datE=t(maData),power=6);\n# Plot a histogram of k and a scale free topology plot\nsizeGrWindow(10,5);\npar(mfrow=c(1,2));\npng(filename=\"Data/BRCA/maPearson_WGCNA-power6_Hist.png\");\nhist(k, main=\"Connectivity (MArray Pearson pow6)\");\ndev.off();\npng(filename=\"Data/BRCA/maPearson_WGCNA-power6_ScaleFreePlot.png\");\nscaleFreePlot(k, main=\"Check scale free topology (MArray Pearson pow6\\n\");\ndev.off();\n\nk=softConnectivity(datE=t(rsData),power=6);\n# Plot a histogram of k and a scale free topology plot\nsizeGrWindow(10,5);\npar(mfrow=c(1,2));\npng(filename=\"Data/BRCA/rsPearson_WGCNA-power6_Hist.png\");\nhist(k, main=\"Connectivity (RNASeq Pearson pow6)\");\ndev.off();\npng(filename=\"Data/BRCA/rsPearson_WGCNA-power6_ScaleFreePlot.png\");\nscaleFreePlot(k, main=\"Check scale free topology (RNASeq Pearson pow6)\\n\");\ndev.off();\n",
    "created" : 1412473138214.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "244515891",
    "id" : "65B92F1A",
    "lastKnownWriteTime" : 1412372054,
    "path" : "C:/Users/Student/My Research/microArray v RNA Seq/CoexpressionNetworkRProject/main.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
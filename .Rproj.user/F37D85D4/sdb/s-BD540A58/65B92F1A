{
    "contents" : "#Coexpression Network Project main script\n#By: Brian Arand\n#September 2014\n\n#workingDirectories <- c(\"/home/barand/microArray_v_RNASeq/\",\"C:/Users/Student/My Research/microArray v RNA Seq/\");\n#for(wd in workingDirectories)\n#  setwd(wd);\n\nprint(paste(\"Current working directory: \", getwd()));\nprint(\"Changing Current working directory.\")\n\n#setwd(\"C:/Users/Student/My Research/microArray v RNA Seq/\");\nsetwd(\"/home/barand/microArray_v_RNASeq/\")\n\nprint(paste(\"Current working directory: \", getwd()));\n\n#source(\"http://bioconductor.org/biocLite.R\");\n\n#read in arguments\nprint(\"Reading in command line arguments.\");\nargs <- commandArgs(trailingOnly = TRUE);\nprint(paste(\"commandArgs: \",args));\n\nif(length(args) > 0)\n{\n  #Parse arguments (we expec the form --argName=argValue)\n  parseArgs <- function (x) strsplit(sub(\"^--\",\"\",x), \"=\");\n  argsDF <- as.data.frame(do.call(\"rbind\", parseArgs(args)));\n  args <- as.character(argsDF$V2)\n  names(args) <- argsDF$V1\n  rm(argsDF);\n}\nargs<- as.list(args);\n\n#initialize arguments if \ninitializeBooleanArg <- function(arg, default){\n  if(is.null(arg))\n  {\n    arg <- default;\n  }\n  else if(is.character(arg))\n  {\n    arg <- as.logical(arg);\n  }\n  return(arg);\n}\n\nargs$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);\nargs$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);\nargs$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);\nargs$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);\nargs$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);\nargs$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);\nargs$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);\n\n#import data\nprint(\"Importing data files.\");\nmaDir <- \"Data/BRCA/Batch 47/Expression-Genes/UNC__AgilentG4502A_07_3/Level_3/\";\nrsDir <- \"Data/BRCA/Batch 47/RNASeqV2/UNC__IlluminaHiSeq_RNASeqV2/Level_3/\";\n\n#Metadata\nmetaData <- read.table(file=\"Data/BRCA/Batch 47/file_manifest.txt\",header=TRUE,sep=\"\\t\");\nmetaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool\nmetaData[,6] <- gsub(pattern=\"-\",replacement=\".\", x=metaData[,6]);#replace '-' with '.' to make mapping easier later\n\nmaControlFiles <- paste(sep='', maDir ,as.character(metaData[metaData[,\"control\"] & metaData[,\"Platform.Type\"]==\"Expression-Genes\" ,\"File.Name\"]));\nmaCancerFiles <- paste(sep='', maDir ,as.character(metaData[!metaData[,\"control\"] & metaData[,\"Platform.Type\"]==\"Expression-Genes\" ,\"File.Name\"]));\nrsControlFiles <- paste(sep='', rsDir ,as.character(metaData[metaData[,\"control\"] & metaData[,\"Platform.Type\"]==\"RNASeqV2\" & grepl(x=metaData[,\"File.Name\"], pattern=\"*.rsem.genes.results\") ,\"File.Name\"]));\nrsCancerFiles <- paste(sep='', rsDir ,as.character(metaData[!metaData[,\"control\"] & metaData[,\"Platform.Type\"]==\"RNASeqV2\" & grepl(x=metaData[,\"File.Name\"], pattern=\"*.rsem.genes.results\") ,\"File.Name\"]));\n\nsource(\"CoexpressionNetworkRProject/constructCrossSampleFrame.R\");\nmaConData <- constructCrossSampleFrame(inFiles=maControlFiles,rows2Ignore=c(1));\nmaCanData <- constructCrossSampleFrame(inFiles=maCancerFiles,rows2Ignore=c(1));\nrsConData <- constructCrossSampleFrame(inFiles=rsControlFiles,cols2Ignore=c(3,4));\nrsCanData <- constructCrossSampleFrame(inFiles=rsCancerFiles,cols2Ignore=c(3,4));\nif(args$normFlagRPKM)\n{\n  rsRPKMData <- constructCrossSampleFrame(inFiles=c(rsControlFiles,rsCancerFiles),cols2Ignore=c(2,3));\n}\n\nremove(maControlFiles);\nremove(maCancerFiles);\nremove(rsControlFiles);\nremove(rsCancerFiles);\n\n#take intersection of genes between micro array and rnaseq set\nprint(\"Calculating intersection of genes.\");\nsource(\"CoexpressionNetworkRProject/trim_TCGA_RNASeq_GeneNames.R\");\n#rsGenes <- trim_TCGA_RNASeq_GeneNames(rsGenes);\nrsConData <- trim_TCGA_RNASeq_GeneNames(rsConData);\nrsCanData <- trim_TCGA_RNASeq_GeneNames(rsCanData);\n#rsRPKMData <- trim_TCGA_RNASeq_GeneNames(rsRPKMData);\n\nsharedGenes <- intersect(row.names(maConData), row.names(rsConData));\nmaConData <- maConData[sharedGenes,];\nrsConData <- rsConData[sharedGenes,];\nmaCanData <- maCanData[sharedGenes,];\nrsCanData <- rsCanData[sharedGenes,];\n#rsRPKMData <- rsRPKMData[sharedGenes,];\nremove(sharedGenes);\nconCount <- dim(maConData)[2];\ncanCount <- dim(maCanData)[2];\n\ncountData <- mapply(x=as.matrix(c(rsConData, rsCanData)), FUN=as.integer);\nrow.names(countData) <- row.names(rsConData);\n\n#normalize\nprint(\"Begin normalization:\")\n\n#RMKM\nif(args$normFlagRPKM)\n{\n  print(\"RPKM normalization:\")\n  source(\"http://bioconductor.org/biocLite.R\")\n  biocLite(\"easyRNASeq\")\n  library(\"easyRNASeq\")\n  \n  biocLite(\"TxDb.Hsapiens.UCSC.hg19.knownGene\")\n  biocLite(\"org.Hs.eg.db\")\n  hg19GeneLengths <- function(symbols)\n  {\n    require(TxDb.Hsapiens.UCSC.hg19.knownGene) \n    require(org.Hs.eg.db)\n    exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')    \n    egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )\n    sapply(egs,function(eg)\n    {\n      exons = exons.db[[eg]]\n      if(is.null(exons))\n      {return (0)}\n      exons = reduce(exons)\n      sum( width(exons) )\n    })\n    return as.numberic(egs);\n  }\n  rpkm <- function(expMatrix)\n  {\n    #RPKM = (10^9 * C)/(N * L), with\n    #C = Number of reads mapped to a gene\n    #N = Total mapped reads in the experiment\n    #L = gene length in base-pairs for a gene\n    lengths <- hg19GeneLengths(row.names(expMatrix));\n    I<- intersect(names(lengths),row.names(expMatrix));\n    expMatrix <- expMatrix[I,];\n    lengths <- lengths[I];\n    rpkmMat <- apply(X=expMatrix,MARGIN=2,FUN=function(x){return(x/sum(x))})\n    rpkmMat <- 10^9 * rpkmMat \n    rpkmMat <- rpkmMat / as.numeric(lengths);\n    return(rpkmMat);\n  }\n  \n  rsData_RPKM <- rpkm(countData);\n}\n\n#DESeq variance stableizing transformation (VST) normalization\nif(args$normFlagDESeq)\n{\n  print(\"DESeq normalization:\");\n  source(\"http://bioconductor.org/biocLite.R\");\n  biocLite(\"DESeq2\");\n  library(\"DESeq2\");\n\n  colData <- DataFrame(condition=c(rep(x=\"control\",times=conCount), rep(x=\"cancer\", times=canCount)), type=c(rep(x=\"single-read\",times=conCount+canCount)));\n  #row.names(colData) <- colnames(countData);\n  dds <- DESeqDataSetFromMatrix(countData=countData, design = ~ condition,colData=colData);\n  dds <- DESeq(dds);\n  dds$condition <- factor(dds$condition, levels=c(\"cancer\",\"control\"));\n  res <- results(dds);\n  res$log2FoldChange<- -res$log2FoldChange;#reverse direction of test\n  \n  if(args$diffExprsFlaq)\n  {\n    #DESeq differential Expression\n    resOrdered <- res[order(res$padj),];  \n    head(resOrdered);\n    n <- 150;\n    write.csv(resOrdered,file=paste(\"DiffExpression DesSEQ.csv\"),quote=FALSE,);\n    rm(resOrdered);\n  }\n    normalizedCounts_DESeq2 <- t( t(counts(dds)) / sizeFactors(dds) );\n    rsConData_norm_DESeq2 <- normalizedCounts_DESeq2[,1:conCount];\n    rsCanData_norm_DESeq2 <- normalizedCounts_DESeq2[,conCount+1:canCount];\n    row.names(rsConData_norm_DESeq2) <- row.names(normalizedCounts_DESeq2);\n    row.names(rsCanData_norm_DESeq2) <- row.names(normalizedCounts_DESeq2);\n    remove(normalizedCounts_DESeq2);\n}\n\n#EdgeR does not do cross sample normalization\n#source(\"http://bioconductor.org/biocLite.R\")\n#biocLite(\"edgeR\")\n#library(\"edgeR\")\n\n#total ubiquetous normalization as per \"Optimal scaling of Digital Transcriptomes\" By Glusman et al.\nif(args$normFlagUbi)\n{\n  print(\"Total ubiquitous normalization:\");\n  #setwd(\"CoexpressionNetworkProject/\")\n  source(\"CoexpressionNetworkRProject/ubiquitousNormalize.R\");\n  source(\"CoexpressionNetworkRProject/getUbiquitousGeneSet.R\");\n  source(\"CoexpressionNetworkRProject/getTrimmedSet_UbiquitousHelper.R\");\n  rsData_Ubi <- ubiquitousNormalize(countData,lowerPercentile=0.3,upperPercentile=0.85);\n  #setwd(\"..\")\n}\n\n#quantile\nif(args$normFlagQuant)\n{\n  print(\"Quantile normalization:\");\n  source('http://bioconductor.org/biocLite.R');\n  biocLite('preprocessCore');\n  #load package\n  library(preprocessCore);\n  \n  #quantile differential expression\n  #...\n  normalizedCounts_quant <- normalize.quantiles(x= countData, copy=TRUE);\n  rsConData_norm_quant <- normalizedCounts_quant[,1:conCount];\n  rsCanData_norm_quant <- normalizedCounts_quant[,conCount+1:canCount];\n  remove(normalizedCounts_quant);\n}\n\nif(args$diffExprsFlaq)\n{\n  print(\"Gene Differential Expression:\");\n  \n  #microarray differential expression\n  #may not be working... produces rediculously small p-values\n  source(\"http://bioconductor.org/biocLite.R\");\n  biocLite( \"limma\");\n  library(\"limma\");\n  \n  condition=c(rep(x=\"control\",times=dim(x=rsConData)[2]), rep(x=\"cancer\", times=canCount));\n  combn <- factor(paste(pData(phenoData)[,1], pData(phenoData)[,2], sep = \"_\"));\n  design <- model.matrix(~condition);# describe model to be fit\n  \n  fit <- lmFit(cbind(maConData, maCanData), design);# fit each probeset to model\n  efit <- eBayes(fit);# empirical Bayes adjustment\n  write.csv(topTable(efit, coef=2, number=length(efit$p.value)), file=paste(\"DiffExpression MicroArray.csv\"),quote=FALSE);\n\n  #significance comparison\n  maPRank <- rank(efit$p.value[,2]);\n  rsPRank <- rank(res$padj);\n  names(rsPRank) <- row.names(res);\n  maPRank <- maPRank[sort(names(maPRank))];\n  rsPRank <- rsPRank[sort(names(rsPRank))];\n  plot2Groups(GroupA=maPRank, GroupB=rsPRank, xlab=\"MicroArray Rank\", ylab=\"RNASeq Rank\", main=\"DEG Rank comparison by p-value\", file=\"Comp_DEG_pVal_rank_across_tech.png\");\n  Rs_PRank <- cor(x=maPRank, y=rsPRank, method=\"spearman\");\n  rm(maPRank);\n  rm(rsPRank);\n  \n  #log foldchange comparison\n  maFC <- topTable(efit, coef=2, number=length(efit$p.value))[,1];\n  names(maFC) <- row.names(topTable(efit, coef=2, number=length(efit$p.value)));\n  maFCRank <- rank(maFC);\n  rsFC <- res$log2FoldChange;\n  names(rsFC) <- row.names(res);\n  rsFCRank <- rank(rsFC);\n  maFCRank <- maFCRank[sort(names(maFCRank))];\n  rsFCRank <- rsFCRank[sort(names(rsFCRank))];\n  plot2Groups(GroupA=maFCRank, GroupB=rsFCRank, xlab=\"MicroArray Rank\", ylab=\"RNASeq Rank\", main=\"Log2 Fold Change Rank comparison\", file=\"Comp_FC_rank_across_tech.png\");\n  Rs_FCRank <- cor(x=maFCRank, y=rsFCRank, method=\"spearman\");\n  rm(maFCRank);\n  rm(rsFCRank);\n}\n\n#subset by significance\nif(args$diffExprsFlag)\n{\n  subBySig <- FALSE;\n  if(subBySig)\n  {\n    print(\"Filtering genes by significance:\");\n    cutoff<- 0.0000001;\n    filter <- efit.p.adj<cutoff & !is.na(efit.p.adj);\n    maGenes<- as.matrix(cbind(efit.p.adj[filter], maConData[filter,],maCanData[filter,]));#attach adjusted p value now\n    filter <- res$padj<cutoff & !is.na(res$padj);\n    rsGenes<- as.matrix(cbind(res$padj[filter], rsConData_norm_DESeq2[filter,],rsCanData_norm_DESeq2[filter,]));#attach adjusted p value now\n  }\n  else #subset by rank top X most significant\n  {\n    print(\"Filtering genes by fold-change:\")\n    cutoff <- 12000;\n    filter <- rank(efit.p.adj)<=cutoff & !is.na(efit.p.adj);\n    maGenes<- as.matrix(cbind(efit.p.adj[filter], maConData[filter,],maCanData[filter,]));#attach adjusted p value now\n    filter <- rank(res$padj)<=cutoff & !is.na(res$padj);\n    rsGenes<- as.matrix(cbind(res$padj[filter], rsConData_norm_DESeq2[filter,],rsCanData_norm_DESeq2[filter,]));#attach adjusted p value now\n  }\n  \n  #intersection of technology significant genes and output venn diagram gene lists\n  filter <- intersect(row.names(maGenes), row.names(rsGenes));\n  maIntGenes <- maGenes[filter,];\n  rsIntGenes <- rsGenes[filter,];\n  maUniGenes <- maGenes[setdiff(row.names(maGenes),row.names(maIntGenes)),];\n  rsUniGenes <- rsGenes[setdiff(row.names(rsGenes),row.names(rsIntGenes)),];\n  \n  #top genes in each group\n  head(sort(maIntGenes[,1]))\n  head(sort(rsIntGenes[,1]))\n  head(sort(maUniGenes[,1]))\n  head(sort(rsUniGenes[,1]))\n  #remove p.values from Gene lists\n  maGenes <- maGenes[,-1];\n  rsGenes <- rsGenes[,-1];\n}\nelse\n{\n  print(\"No gene filtering performed.\")\n  maGenes <- cbind(maConData, maCanData);\n  rsGenes <- cbind(rsConData_norm_DESeq2,rsCanData_norm_DESeq2);\n  cutoff <- \"allGenes\";\n}\n\nif(args$QCFlag)\n{\n  print(\"Outputing quality control figures:\");\n  \n  maRankData<-apply(maGenes,MARGIN=2,FUN=rank);\n  rsRankData<-apply(rsGenes,MARGIN=2,FUN=rank);\n  \n  #plot means\n  source(\"CoexpressionNetworkProject/plot2Groups.R\");\n  maGenes<- cbind(maConData, maCanData, maFC, maP);\n  rsData_DESeq2 <- cbind(rsConData_norm_DESeq2, rsCanData_norm_DESeq2);\n  rsData_quant <- cbind(rsConData_norm_quant, rsCanData_norm_quant);\n  \n  plot2Groups(rowMeans(maGenes, na.rm = TRUE), log(rowMeans(rsData_DESeq2, na.rm = TRUE)),main=\"Micro Array vs RNASeq DESeq gene means (91 paired patient samples)\",xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq DEseq counts\", file=\"Comp_gene_means_across_tech_DESeq.png\", histA=TRUE, histB=TRUE);\n  plot2Groups(apply(maGenes,1,median, na.rm = TRUE), apply(log(rsData_DESeq2),1,median, na.rm = TRUE),main=\"Micro Array vs RNASeq DESeq gene medians (91 paired patient samples)\",xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq DESeq counts\", file=\"Comp_gene_medians_across_tech_DESeq.png\", histA=TRUE, histB=TRUE);\n  plot2Groups(rowMeans(apply(maGenes,MARGIN=2,FUN=rank), na.rm = TRUE), rowMeans(apply(rsData_DESeq2,MARGIN=2,FUN=rank), na.rm = TRUE),main=\"Micro Array vs RNASeq DESeq gene mean ranks (91 paired patient samples)\",xlab=\"Ranked Lowess Normalized MicroArray\",ylab=\"Log RNASeq DESeq counts\", file=\"Ranked Comp_gene_mean_rank_across_tech_DESeq.png\");\n  plot2Groups(apply(apply(maGenes,MARGIN=2,FUN=rank), 1,median, na.rm = TRUE), apply(apply(rsData_DESeq2,MARGIN=2,FUN=rank),1,median, na.rm = TRUE),main=\"Micro Array vs RNASeq DESeq gene median ranks (91 paired patient samples)\",xlab=\"Ranked Lowess Normalized MicroArray\",ylab=\"Ranked Log RNASeq DESeq counts\", file=\"Comp_gene_median_rank_across_tech_DESeq.png\");\n  \n  plot2Groups(rowMeans(maGenes, na.rm = TRUE), log(rowMeans(rsData_quant, na.rm = TRUE)),main=\"Micro Array vs RNASeq quant gene means (91 paired patient samples)\",xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq quant counts\", file=\"Comp_gene_means_across_tech_quant.png\", histA=TRUE, histB=TRUE);\n  \n  GeneID=3245;\n  GeneName= row.names(maGenes)[GeneID];\n  plot2Groups(t(maGenes[GeneID,]), t(log(rsData_DESeq2[GeneID,])),main=paste(\"Micro Array vs RNASeq DESeq (\", GeneName, \")\"),xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq DESeq counts\", file=paste(\"Comp_gene_across_tech_DESeq-\",GeneName,\".png\"));\n  #plot2Groups(t(maRankData[GeneID,]), t(rsRankData[GeneID,]),main=paste(\"Micro Array vs RNASeq ranks DESeq (\", GeneName, \")\"),xlab=\"Ranked Lowess Normalized MicroArray\",ylab=\"Ranked Log RNASeq DESeq counts\", file=paste(\"Comp_gene_rank_across_tech_DESeq-\",GeneName,\".png\"));\n  plot2Groups(t(maGenes[GeneID,]), t(log(rsData_quant[GeneID,])),main=paste(\"Micro Array vs RNASeq quant (\", GeneName, \")\"),xlab=\"Lowess Normalized MicroArray\",ylab=\"Log RNASeq quant counts\", file=paste(\"Comp_gene_across_tech_quant-\",GeneName,\".png\"));\n  \n  #check normalizations with boxplots\n  png(filename=\"MicroArray normalization check.png\");\n  boxplot(x=maGenes,names=seq(1,dim(maGenes)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"expression value\");\n  dev.off();\n  png(filename=\"RNASeq Count normalization check.png\");\n  boxplot(x=log(rsGenes),names=seq(1,dim(rsGenes)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq counts\");\n  dev.off();\n  png(filename=\"RNASeq RPKM normalization check.png\");\n  boxplot(x=log(rsRPKMData),names=seq(1,dim(rsRPKMData)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq RPKM\");\n  dev.off();\n  png(filename=\"RNASeq DESeq normalization check.png\");\n  boxplot(x=log(cbind(rsConData_norm_DESeq2, rsCanData_norm_DESeq2)),names=seq(1,dim(rsConData_norm_DESeq2)[2]+dim(rsCanData_norm_DESeq2)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq DESeq normalized\");\n  dev.off();\n  png(filename=\"RNASeq quantile normalization check.png\");\n  boxplot(x=log(cbind(rsConData_norm_quant, rsCanData_norm_quant)),names=seq(1,dim(rsConData_norm_quant)[2]+dim(rsCanData_norm_quant)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq quan normalized\");\n  dev.off();\n  png(filename=\"RNASeq total ubiquitous normalization check.png\");\n  boxplot(x=log(rsData_Ubi),names=seq(1,dim(rsConData_norm_quant)[2]+dim(rsCanData_norm_quant)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"log RNA seq total ubiquitous normalized\");\n  dev.off();\n}\n\n#calculated correlation statistics\nprint(\"Constructing correlation matricies\");\nprint(\"Calculating Microarray correlation matrix:\");\nmaPearson <- cor(x=t(maGenes), method=\"pearson\", use=\"complete.obs\");\nmaPearson_hist <- hist(x=maPearson,breaks=100,plot=FALSE);\nwrite.csv(x=maPearson,file=paste(\"Data/BRCA/maPearson_\",cutoff,\"_int.txt\"));\nif(!args$diffCoexFlag)\n{\n  rm(maPearson);\n}\n\nprint(\"Calculating RNASeq DESeq correlation matrix:\");\nrsPearson_DESeq <- cor(x=t(rsGenes), method=\"pearson\", use=\"complete.obs\");\nrsPearson_DESeq_hist <- hist(x=rsPearson_DESeq,breaks=100,plot=FALSE);\nwrite.csv(x=rsPearson_DESeq,file=paste(\"Data/BRCA/rsPearson_\",cutoff,\"_int.txt\"));\nif(!args$diffCoexFlag)\n{\n  rm(rsPearson_DESeq);\n}\n\nprint(\"Calculating RNASeq Quantile correlation matrix:\");\nrsPearson_quant <- cor(x=t(rsData_quant), method=\"pearson\", use=\"complete.obs\");\nrsPearson_quant_hist <- hist(x=rsPearson_quant,breaks=100,plot=FALSE);\nrm(rsPearson_quant);\n\nprint(\"Calculating RNASeq Total Ubiquitous correlation matrix:\");\nrsPearson_Ubi <- cor(x=t(rsData_Ubi), method=\"pearson\", use=\"complete.obs\");\nrsPearson_Ubi_hist <- hist(x=rsPearson_Ubi,breaks=100,plot=FALSE);\nwrite.csv(x=rsPearson_Ubi,file=paste(\"Data/BRCA/rsPearson_top12000_int.txt\"));\nrm(rsPearson_Ubi);\n\nprint(\"Calculating RNASeq Raw correlation matrix:\");\nrsPearson_raw <- cor(x=t(countData), method=\"pearson\", use=\"complete.obs\");\nrsPearson_raw_hist <- hist(x=rsPearson_raw,breaks=100,plot=FALSE);\nrm(rsPearson_raw);\n\nprint(\"Calculating RNASeq RPKM correlation matrix:\");\nrsPearson_RPKM <- cor(x=t(rsData_RPKM), method=\"pearson\", use=\"complete.obs\");\nrsPearson_RPKM_hist <- hist(x=rsPearson_RPKM,breaks=100,plot=FALSE);\nrm(rsPearson_RPKM);\n\n#plot overlapping histogram of PCC\nprint(\"Outputting comparative PCC histogram:\");\nmaxy <- 0.08\n# Density plots\nlibrary(\"ggplot2\")\n\nPCC_density_data <- data.frame(\n  PCC=c(\n    maPearson_hist$mids, \n    rsPearson_DESeq_hist$mids, \n    rsPearson_quant_hist$mids, \n    rsPearson_Ubi_hist$mids, \n    rsPearson_raw_hist$mids, \n    rsPearson_RPKM_hist$mids), \n  density=c(\n    maPearson_hist$counts/sum(maPearson_hist$counts),\n    rsPearson_DESeq_hist$counts/sum(rsPearson_DESeq_hist$counts),\n    rsPearson_quant_hist$counts/sum(rsPearson_quant_hist$counts),\n    rsPearson_Ubi_hist$counts/sum(rsPearson_Ubi_hist$counts),\n    rsPearson_raw_hist$counts/sum(rsPearson_raw_hist$counts),\n    rsPearson_RPKM_hist$counts/sum(rsPearson_RPKM_hist$counts)),\n  method=c(\n    rep(x=\"microArray\",times=length(maPearson_hist$counts)),\n    rep(x=\"DESeq\",times=length(rsPearson_DESeq_hist$counts)),\n    rep(x=\"quantile\",times=length(rsPearson_quant_hist$counts)),\n    rep(x=\"Total Ubiquitous\",times=length(rsPearson_Ubi_hist$counts)),\n    rep(x=\"raw\",times=length(rsPearson_raw_hist$counts)),\n    rep(x=\"RPKM\",times=length(rsPearson_RPKM_hist$counts))));\n\npng(filename=\"RNASeq total ubiquitous normalization check.png\");\nggplot(data=PCC_density_data, aes(x=PCC, y=density, group=method, colour=method)) + \n  geom_line(size=1, aes(linetype=method)) +\n  ggtitle(\"PCC density comparison\");\ndev.off();\n\nrm(PCC_density_data);\n\nif(args$diffCoexFlaq)\n{\n  print(\"Calculating differential coexpression network.\");\n  diffPearson <- rsPearson - maPearson\n  write.csv(x=diffPearson,file=paste(\"Data/BRCA/diffPearson.txt\"));\n\n  #output venn diagram gene-edge lists\n}\n\n#create iGraph and plot\nlibrary(\"igraph\")\n\nprint(\"Outputting microArray coexpression matrix\");\nwrite.csv(x=maPearson,file=paste(\"Data/BRCA/maPearson_intersection_\", cutoff, \".txt\"));\nrange(maPearson);\npng(filename=paste(\"Data/BRCA/maPearsonHist_intersection_\", cutoff, \".png\"));\nhist(x=maPearson,breaks=20);\ndev.off();\n\nprint(\"Constructing microArray iGraph.\");\nmaGraph <-graph.adjacency(adjmatrix=maPearson*1000,mode=\"undirected\", weighted=TRUE);\n#add vertex attributes to graph\nfor(i in 1:length(V(maGraph)))\n{\n  name <- V(maGraph)[i]$name;\n  V(maGraph)[i]$fc <- maFC[name];\n  V(maGraph)[i]$p <- efit.p.adj[name];\n}\n\nprint(\"Outputting microArray iGraph.\");\nwrite.graph(maGraph, file=paste(\"maGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\nrm(maGraph);\nrm(maPearson);\n\nprint(\"Outputting RNASeq coexpression matrix\");\nwrite.table(x=rsPearson,file=paste(\"Data/BRCA/rsPearson_intersection_\", cutoff, \".txt\"));\nrange(rsPearson);\npng(filename=paste(\"Data/BRCA/rsPearsonHist_intersection_\", cutoff, \".png\"));\nhist(x=rsPearson,breaks=20);\ndev.off();\n\nprint(\"Constructing RNASeq iGraph.\");\nrsGraph <-graph.adjacency(adjmatrix=rsPearson*1000,mode=\"undirected\", weighted=TRUE);\nfor(i in 1:length(V(rsGraph)))\n{\n  name <- V(rsGraph)[i]$name;\n  V(rsGraph)[i]$fc <- rsFC[name];\n  V(rsGraph)[i]$p <- res[name,]$padj;\n}\n\nprint(\"Outputting RNASeq iGraph\");\nwrite.graph(rsGraph, file=paste(\"rsGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\nrm(rsGraph);\nrm(rsPearson);\n\nif(args$diffCoexFlag)\n{\n  print(\"Outputting differential coexpression matrix\");\n  write.csv(x=diffPearson,file=paste(\"Data/BRCA/diffPearson_intersection_\", cutoff, \".txt\"));\n  range(diffPearson);\n  png(filename=paste(\"Data/BRCA/diffPearsonHist_intersection_\", cutoff, \".png\"));\n  hist(x=maPearson,breaks=20);\n  dev.off();\n  \n  print(\"Constructing differential coexpression iGraph\");\n  diffGraph <-graph.adjacency(adjmatrix=diffPearson*1000,mode=\"undirected\", weighted=TRUE);\n  for(i in 1:length(V(diffGraph)))\n  {\n    name <- V(diffGraph)[i]$name;\n    V(diffGraph)[i]$RS_fc <- rsFC[name];\n    V(diffGraph)[i]$RS_p <- res[name,]$padj;\n    V(diffGraph)[i]$MA_fc <- maFC[name];\n    V(diffGraph)[i]$MA_p <- efit.p.adj[name];\n  }\n  print(\"Outputting differential coexpression iGraph\");\n  write.graph(diffGraph, file=paste(\"diffGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\n  rm(diffGraph);\n  rm(diffPearson);\n}\n#calculate difference network and fold-change network\n#difNet <- rsPearson - maPearson;\n#fcNet <- rsPearson / maPearson;\n#visualize network\n\n##scale free networks via WGCNA\n##Load WGCNA package\n#library(WGCNA);\n##Load additional necessary packages\n#library(cluster);\n#k=softConnectivity(datE=t(maGenes),power=6);\n## Plot a histogram of k and a scale free topology plot\n#sizeGrWindow(10,5);\n#par(mfrow=c(1,2));\n#png(filename=\"Data/BRCA/maPearson_WGCNA-power6_Hist.png\");\n#hist(k, main=\"Connectivity (MArray Pearson pow6)\");\n#dev.off();\n#png(filename=\"Data/BRCA/maPearson_WGCNA-power6_ScaleFreePlot.png\");\n#scaleFreePlot(k, main=\"Check scale free topology (MArray Pearson pow6\\n\");\n#dev.off();\n\n#k=softConnectivity(datE=t(rsGenes),power=6);\n## Plot a histogram of k and a scale free topology plot\n#sizeGrWindow(10,5);\n#par(mfrow=c(1,2));\n#png(filename=\"Data/BRCA/rsPearson_WGCNA-power6_Hist.png\");\n#hist(k, main=\"Connectivity (RNASeq Pearson pow6)\");\n#dev.off();\n#png(filename=\"Data/BRCA/rsPearson_WGCNA-power6_ScaleFreePlot.png\");\n#scaleFreePlot(k, main=\"Check scale free topology (RNASeq Pearson pow6)\\n\");\n#dev.off();\n\nquit();\n",
    "created" : 1412473138214.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "859965401",
    "id" : "65B92F1A",
    "lastKnownWriteTime" : 1412626232,
    "path" : "C:/Users/Student/My Research/microArray v RNA Seq/CoexpressionNetworkRProject/main.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}